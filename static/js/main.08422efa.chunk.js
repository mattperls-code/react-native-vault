(this["webpackJsonpreact-native-vault-docs"]=this["webpackJsonpreact-native-vault-docs"]||[]).push([[0],{298:function(e,t,n){},299:function(e,t,n){"use strict";n.r(t);var a=n(1),s=n.n(a),o=n(32),l=n.n(o),i=(n(45),n(8)),c=n(2),r=n.p+"static/media/logo.2c86b2ea.svg",d=n(304),p=n(301),m=n(0),u=function(){return Object(m.jsxs)(s.a.Fragment,{children:[Object(m.jsxs)("section",{children:[Object(m.jsx)("h1",{children:"react-native-vault"}),Object(m.jsx)("div",{className:"logoContainer",children:Object(m.jsx)("img",{src:r,className:"logo",alt:"logo"})}),Object(m.jsx)("div",{className:"description",children:"A Persistent, Secure, And Local Database For React-Native"}),Object(m.jsx)("br",{}),Object(m.jsx)("br",{}),Object(m.jsx)(i.b,{to:"docs/getting-started",children:"In Depth Documentation Here"}),Object(m.jsx)(i.b,{to:"example",children:"Usage Example Here"})]}),Object(m.jsxs)("section",{children:[Object(m.jsx)("h2",{children:"Overview"}),Object(m.jsx)("div",{className:"description",children:"Fundamentally, react-native-vault works by storing encrypted data with react native's async storage."}),Object(m.jsx)("div",{className:"description",children:"With react-native-vault, you can focus on your data and let the encryption, storage, and basic interactions be handled automatically."}),Object(m.jsx)("div",{className:"description",children:"The vault class in react-native-vault allows you to create, access, and set groups of stored data in the form of deposits and collections."}),Object(m.jsx)("div",{className:"description",children:"Deposits act as simple key value storage, and are perfect for user preferences or small pieces of data."}),Object(m.jsx)("div",{className:"description",children:"Collections are designed to hold multiple complex pieces of data, and come with helper methods to simplify interactions."}),Object(m.jsx)("br",{}),Object(m.jsx)("div",{className:"docsDescription",children:"Internal Structure:"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:p.a,children:'<AsyncStorageKeys>: {\n    <vaultId>: {\n        deposits: {\n            name: "John Doe",\n            age: 24,\n            married: true,\n            averageMinutesOnApp: 12,\n            averagePickupsPerDay: 2\n        },\n        collections: {\n            family: [\n                {\n                    name: "Jane Doe",\n                    age: 22,\n                    married: true\n                },\n                {\n                    name: "Jason Doe",\n                    age: 34,\n                    married: false\n                },\n                {\n                    name: "Jackie Doe",\n                    age: 26,\n                    married: false\n                }\n            ],\n            friends: [\n                {\n                    name: "Matthew Perlman",\n                    age: 15,\n                    married: false\n                },\n                {\n                    name: "Rafayel Amirkhanyan",\n                    age: 14,\n                    married: false\n                }\n            ]\n        }\n    }\n}'})]}),Object(m.jsxs)("section",{children:[Object(m.jsx)("h2",{children:"Simple Usage (Installation)"}),Object(m.jsx)("div",{className:"docsDescription",children:"Install the react-native-vault package"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"bash",style:p.a,children:"npm install react-native-vault"}),Object(m.jsx)("div",{className:"docsDescription",children:"Manually install one dependency"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"bash",style:p.a,children:"npm install @react-native-async-storage/async-storage"}),Object(m.jsx)("div",{className:"docsDescription",children:"Install the necessary pods"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"bash",style:p.a,children:"cd ios && pod install && cd .."})]}),Object(m.jsxs)("section",{children:[Object(m.jsx)("h2",{children:"Simple Usage (Vault Setup)"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:p.a,children:'import Vault from "react-native-vault";\n\nconst myVault = new Vault("myStorageKey", "myEncryptionKey");\n\nmyVault.initialize(["myCollectionName"]).then(() => {\n\t// Vault has been initialized!\n});'})]}),Object(m.jsxs)("section",{children:[Object(m.jsx)("h2",{children:"Simple Usage (Getting Data From Deposits)"}),Object(m.jsx)("div",{className:"docsDescription",children:"Using a deposit instance"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:p.a,children:'myVault.getDeposit("myDepositName").then(deposit => {\n\tconst data = deposit.data;\n\t// Do stuff with data here\n});'}),Object(m.jsx)("div",{className:"docsDescription",children:"Directly getting json (not recommended)"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:p.a,children:'myVault.getDepositData("myDepositName").then(data => {\n\t// Do stuff with data here\n});'})]}),Object(m.jsxs)("section",{children:[Object(m.jsx)("h2",{children:"Simple Usage (Setting Data In Deposits)"}),Object(m.jsx)("div",{className:"docsDescription",children:"Using a deposit instance"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:p.a,children:'const username = "John Doe";\nmyVault.getDeposit("myDepositName").then(deposit => {\n\tdeposit.set(username);\n\t// Now deposit "myDepositName" is set to "John Doe"\n});'}),Object(m.jsx)("div",{className:"docsDescription",children:"Directly setting json (not recommended)"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:p.a,children:'const username = "John Doe";\nmyVault.setDeposit("myDepositName", username).then(deposit => {\n\t// Now deposit "myDepositName" is set to "John Doe"\n})'})]}),Object(m.jsxs)("section",{children:[Object(m.jsx)("h2",{children:"Simple Usage (Getting Data From Collections)"}),Object(m.jsx)("div",{className:"docsDescription",children:"Using a collection instance"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:p.a,children:'myVault.getCollection("myCollectionName").then(collection => {\n\tconst data = collection.data;\n\t// Do stuff with the data here\n});'}),Object(m.jsx)("div",{className:"docsDescription",children:"Directly getting json (not recommended)"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:p.a,children:'myVault.getCollectionData("myCollectionName").then(data => {\n\t// Do stuff with the data here\n});'})]}),Object(m.jsxs)("section",{children:[Object(m.jsx)("h2",{children:"Simple Usage (Setting Data In Collections)"}),Object(m.jsx)("div",{className:"docsDescription",children:"Using a collection instance"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:p.a,children:'const newData = [{ name: "Jane Doe" }, { name: "John Doe" }];\nmyVault.getCollection("myCollectionName").then(collection => {\n\tcollection.set(newData).then(() => {\n\t\t// Now collection "myCollectionName" is set to [{ name: "Jane Doe" }, { name: "John Doe" }]\n\t});\n});'}),Object(m.jsx)("div",{className:"docsDescription",children:"Directly setting json (not recommended)"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:p.a,children:'const newData = [{ name: "Jane Doe" }, { name: "John Doe" }];\nmyVault.setCollection("myCollectionName", newData).then(() => {\n\t// Now collection "myCollectionName" is set to [{ name: "Jane Doe" }, { name: "John Doe" }]\n});'})]})]})},h=n(302),g=n(38),j=n(303),b=function(){return h.a.registerLanguage("jsx",g.a),Object(m.jsxs)("section",{children:[Object(m.jsx)(i.b,{to:"/",children:"Back To Home"}),Object(m.jsx)("h1",{children:"Example Code"}),Object(m.jsx)(h.a,{customStyle:{width:"calc(min(80vw, 1000px))",margin:"auto",padding:"15px"},language:"jsx",style:j.a,children:'// App.js\n\nimport React, { useRef } from "react"\nimport { StatusBar, SafeAreaView, ScrollView, View, TouchableOpacity, Text, StyleSheet, Animated } from "react-native"\n\nimport Vault from "react-native-vault"\n\nconst Button = ({ label, onPress }) => {\n  return (\n    <TouchableOpacity activeOpacity={0.8} onPress={onPress}>\n      <View style={styles.buttonContainer}>\n        <Text style={styles.buttonLabel}>\n          {\n            label\n          }\n        </Text>\n      </View>\n    </TouchableOpacity>\n  )\n}\n\nconst App = () => {\n  let headerScale = useRef(new Animated.Value(1)).current\n\n  const myVault = new Vault("myVault", "super-secret-key")\n  myVault.initialize(["passwords"]).then(() => {\n    console.log("Initialized Vault")\n  })\n\n  return (\n    <SafeAreaView style={styles.bg}>\n      <StatusBar barStyle={"light-content"} />\n      <ScrollView contentContainerStyle={styles.container} scrollEventThrottle={4} onScroll={(e) => {\n        headerScale.setValue(Math.min(Math.max(1-e.nativeEvent.contentOffset.y / 250, 1), 1.15))\n      }}>\n        <Animated.Text style={[styles.header, { transform: [ { scale: headerScale} ] }]}>react-native-vault</Animated.Text>\n\n        {\n          // USAGE EXAMPLE BELOW\n          // I recommend actually running this with react native\n        }\n\n        <Text style={styles.subheader}>Vault Methods</Text>\n        <Button label={"Reset Vault"} onPress={() => {\n          myVault.reset().then(() => { console.log("Reset Vault") })\n        }} />\n        <Button label={"Initialize Vault"} onPress={() => {\n          myVault.initialize(["passwords"]).then(() => { console.log("Initialized Vault") })\n        }} />\n        <Button label={"Get Collection (Data)"} onPress={() => {\n          myVault.getCollectionData("passwords").then(data => { console.log(JSON.stringify(data, null, 2)) })\n        }} />\n        <Button label={"Set Collection"} onPress={() => {\n          myVault.setCollection("passwords", [\n            { password: "123abc", info: "For Account A" },\n            { password: "password123", info: "For Account B" }\n          ]).then(() => { console.log("Set Collection") })\n        }} />\n\n        <Text style={styles.subheader}>Deposit Methods</Text>\n        <Button label={"Get Deposit (Data)"} onPress={() => {\n          myVault.getDepositData("username").then(data => { console.log(data) })\n        }} />\n        <Button label={"Set Deposit"} onPress={() => {\n          myVault.setDeposit("username", "John Doe").then(() => { console.log("Set Deposit") })\n        }} />\n        <Button label={"Remove Deposit"} onPress={() => {\n          myVault.removeDeposit("username").then(() => { console.log("Removed Deposit") })\n        }} />\n\n        <Text style={styles.subheader}>Collection Methods (Singular)</Text>\n        <Button label={"Add One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.addOne({ password: "super secret password", info: "For Account C" }).then(() => { console.log("Added One") })\n          })\n        }}/>\n        <Button label={"Set One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.setOne(({ password }) => password == "123abc", { password: "a new password", info: "Some New Info" }).then(() => { console.log("Set One") })\n          })\n        }} />\n        <Button label={"Update One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.updateOne(({ password }) => password == "password123", { password: "a stronger password" }).then(() => { console.log("Updated One") })\n          })\n        }} />\n        <Button label={"Remove One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.removeOne(({ info }) => info == "Some New Info").then(() => { console.log("Removed One") })\n          })\n        }} />\n        <Button label={"Find One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.findOne(({ password }) => password == "super secret password").then(data => { console.log(JSON.stringify(data, null, 2)) })\n          })\n        }} />\n\n        <Text style={styles.subheader}>Collection Methods (Multiple)</Text>\n        <Button label={"Add Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.addMultiple([{ password: "qwerty", info: "For Account D" }, { password: "uiop", info: "For Account E" }]).then(() => { console.log("Added Multiple") })\n          })\n        }} />\n        <Button label={"Set Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.setMultiple(({ password }) => password.length < 8, ({ password}) => { return { password: password + "123", info: "This is a little stronger now" }}).then(() => { console.log("Set Multiple") })\n          })\n        }} />\n        <Button label={"Update Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.updateMultiple(({ password }) => password.slice(password.length - 3) == "123", ({ password }) => { return { password: password + "456" }}).then(() => { console.log("Updated Multiple") })\n          })\n        }} />\n        <Button label={"Remove Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.removeMultiple(({ password }) => password.length < 10).then(() => { console.log("Removed Multiple") })\n          })\n        }} />\n        <Button label={"Find Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.findMultiple(({ password }) => password.length > 15).then(data => { console.log(JSON.stringify(data, null, 2)) })\n          })\n        }} />\n\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  bg: {\n    flex: 1,\n    backgroundColor: "rgb(5, 15, 10)"\n  },\n  container: {\n    alignItems: "center"\n  },\n  header: {\n    fontSize: 32,\n    color: "rgb(120, 250, 200)",\n    textShadowColor: "rgb(120, 250, 200)",\n    textShadowRadius: 8,\n    letterSpacing: 1,\n    marginVertical: 36\n  },\n  subheader: {\n    fontSize: 18,\n    fontWeight: "400",\n    fontStyle: "italic",\n    color: "rgb(120, 250, 200)",\n    marginTop: 20,\n    marginBottom: 15\n  },\n  buttonContainer: {\n    width: 270,\n    height: 70,\n    borderRadius: 20,\n    borderWidth: 0.5,\n    borderColor: "rgb(120, 250, 200)",\n    backgroundColor: "rgb(55, 125, 100)",\n    marginBottom: 20,\n    alignItems: "center",\n    justifyContent: "center"\n  },\n  buttonLabel: {\n    fontSize: 21,\n    fontWeight: "500",\n    color: "rgb(120, 250, 200)",\n    letterSpacing: 0.5\n  }\n})\n\nexport default App'})]})},y=(n(298),function(e){e.sidebarContent;var t=e.children;return Object(m.jsxs)(s.a.Fragment,{children:[Object(m.jsx)("aside",{}),Object(m.jsx)("main",{children:t})]})}),x=function(){return Object(m.jsxs)(y,{sidebarContent:[],children:[Object(m.jsxs)("section",{children:[Object(m.jsx)(i.b,{to:"/",children:"Back To Home"}),Object(m.jsx)("h1",{children:"Documentation - Getting Started (Installation)"}),Object(m.jsx)("div",{className:"description",children:"The first step for using react-native-vault is installation."}),Object(m.jsx)("div",{className:"description",children:"This should be as simple as running a few commands."})]}),Object(m.jsxs)("section",{children:[Object(m.jsx)("h2",{children:"Installing from npm"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"bash",style:p.a,children:"npm install react-native-vault"})]}),Object(m.jsxs)("section",{children:[Object(m.jsx)("h2",{children:"Setting up react-native-vault's dependencies"}),Object(m.jsx)("div",{className:"docsDescription",children:"The async storage library must and its corresponding pod must be installed manually"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"bash",style:p.a,children:"npm install @react-native-async-storage/async-storage"}),Object(m.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",marginTop:"10px",padding:"15px"},language:"bash",style:p.a,children:"cd ios && pod install && cd .."}),Object(m.jsxs)("div",{className:"docsDescription",children:["In case of an issue installing async storage, follow the directions ",Object(m.jsx)("a",{style:{display:"inline",fontSize:"24px"},href:"https://react-native-async-storage.github.io/async-storage/docs/install/",children:"here"})]})]})]})},w=function(){return Object(m.jsx)(i.a,{children:Object(m.jsxs)(c.c,{children:[Object(m.jsx)(c.a,{path:"/",exact:!0,component:u}),Object(m.jsx)(c.a,{path:"/example",exact:!0,component:b}),Object(m.jsx)(c.a,{path:"/docs/getting-started",exact:!0,component:x})]})})};l.a.render(Object(m.jsx)(w,{}),document.getElementById("root"))},45:function(e,t,n){}},[[299,1,2]]]);
//# sourceMappingURL=main.08422efa.chunk.js.map