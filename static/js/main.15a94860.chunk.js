(this["webpackJsonpreact-native-vault-docs"]=this["webpackJsonpreact-native-vault-docs"]||[]).push([[0],{270:function(e,t,n){},299:function(e,t,n){},300:function(e,t,n){"use strict";n.r(t);var a=n(0),o=n.n(a),l=n(31),s=n.n(l),c=(n(44),n(8)),i=n(2),r=(n(45),n.p+"static/media/logo.05ab4565.svg"),d=n(306),u=n(303),p=n(1),h=function(){return Object(p.jsxs)(o.a.Fragment,{children:[Object(p.jsxs)("section",{children:[Object(p.jsx)("h1",{children:"react-native-vault"}),Object(p.jsx)("div",{className:"logoContainer",children:Object(p.jsx)("img",{src:r,className:"logo",alt:"logo"})}),Object(p.jsx)("div",{className:"description",children:"A Persistent, Secure, And Local Database For React-Native"}),Object(p.jsx)(c.b,{to:"docs/getting-started",children:"In Depth Documentation Here"}),Object(p.jsx)(c.b,{to:"example",children:"Usage Example Here"})]}),Object(p.jsxs)("section",{children:[Object(p.jsx)("h2",{children:"Overview"}),Object(p.jsx)("div",{className:"description",children:"Fundamentally, react-native-vault works by storing encrypted data with react native's async storage."}),Object(p.jsx)("div",{className:"description",children:"With react-native-vault, you can focus on your data and let the encryption, storage, and basic interactions be handled automatically."}),Object(p.jsx)("div",{className:"description",children:"The vault class in react-native-vault allows you to create, access, and set groups of stored data called collections."}),Object(p.jsx)("div",{className:"description",children:"Collections simplify adding to, setting, updating, removing, and finding stored data."})]}),Object(p.jsxs)("section",{children:[Object(p.jsx)("h2",{children:"Simple Usage (Installation)"}),Object(p.jsx)("div",{className:"docsDescription",children:"Install the package"}),Object(p.jsx)(d.a,{customStyle:{width:"calc(min(80vw, 600px))",margin:"auto",padding:"15px"},language:"bash",style:u.a,children:"npm install react-native-vault"}),Object(p.jsx)("div",{className:"docsDescription",children:"Install the necessary pods"}),Object(p.jsx)(d.a,{customStyle:{width:"calc(min(80vw, 600px))",margin:"auto",padding:"15px"},language:"bash",style:u.a,children:"cd ios && pod install && cd .."})]}),Object(p.jsxs)("section",{children:[Object(p.jsx)("h2",{children:"Simple Usage (Vault Setup)"}),Object(p.jsx)(d.a,{customStyle:{width:"calc(min(80vw, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:u.a,children:'import Vault from "react-native-vault";\n\nconst myVault = new Vault("myStorageKey", "myEncryptionKey");\n\nmyVault.initialize(["myCollectionName"]).then(() => {\n\t// Vault has been initialized!\n});'})]}),Object(p.jsxs)("section",{children:[Object(p.jsx)("h2",{children:"Simple Usage (Getting Data From Collections)"}),Object(p.jsx)("div",{className:"docsDescription",children:"Using a collection instance"}),Object(p.jsx)(d.a,{customStyle:{width:"calc(min(80vw, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:u.a,children:'myVault.getCollection("myCollectionName").then(collection => {\nconst data = collection.data;\n\t// Do stuff with the data here\n});'}),Object(p.jsx)("div",{className:"docsDescription",children:"Directly getting json (not recommended)"}),Object(p.jsx)(d.a,{customStyle:{width:"calc(min(80vw, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:u.a,children:'myVault.getCollectionData("myCollectionName").then(data => {\n\t// Do stuff with the data here\n});'})]}),Object(p.jsxs)("section",{children:[Object(p.jsx)("h2",{children:"Simple Usage (Setting Data In Collections)"}),Object(p.jsx)("div",{className:"docsDescription",children:"Using a collection instance"}),Object(p.jsx)(d.a,{customStyle:{width:"calc(min(80vw, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:u.a,children:'const newData = [{ name: "Jane Doe" }, { name: "John Doe" }];\nmyVault.getCollection("myCollectionName").then(collection => {\n\tcollection.set(newData).then(() => {\n\t\t// Collection has been set\n\t});\n});'}),Object(p.jsx)("div",{className:"docsDescription",children:"Directly setting json (not recommended)"}),Object(p.jsx)(d.a,{customStyle:{width:"calc(min(80vw, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:u.a,children:'const newData = [{ name: "Jane Doe" }, { name: "John Doe" }];\nmyVault.setCollection("myCollectionName", newData).then(() => {\n\t// Collection has been set\n});'})]})]})},m=(n(270),n(304)),g=n(37),b=n(305),j=function(){return m.a.registerLanguage("jsx",g.a),Object(p.jsxs)("div",{className:"bg",children:[Object(p.jsx)(c.b,{to:"/",children:"Back To Home"}),Object(p.jsx)("h1",{children:"Example Code"}),Object(p.jsx)(m.a,{customStyle:{width:"calc(min(80vw, 1000px))",margin:"auto",padding:"15px"},language:"jsx",style:b.a,children:'// App.js\n\nimport React, { useRef } from "react"\nimport { StatusBar, SafeAreaView, ScrollView, View, TouchableOpacity, Text, StyleSheet, Animated } from "react-native"\n\nimport Vault from "react-native-vault"\n\nconst Button = ({ label, onPress }) => {\n  return (\n    <TouchableOpacity activeOpacity={0.8} onPress={onPress}>\n      <View style={styles.buttonContainer}>\n        <Text style={styles.buttonLabel}>\n          {\n            label\n          }\n        </Text>\n      </View>\n    </TouchableOpacity>\n  )\n}\n\nconst App = () => {\n  let headerScale = useRef(new Animated.Value(1)).current\n\n  const myVault = new Vault("myVault", "super-secret-key")\n  myVault.initialize(["passwords"]).then(() => {\n    console.log("Initialized Vault")\n  })\n\n  return (\n    <SafeAreaView style={styles.bg}>\n      <StatusBar barStyle={"light-content"} />\n      <ScrollView contentContainerStyle={styles.container} scrollEventThrottle={4} onScroll={(e) => {\n        headerScale.setValue(Math.min(Math.max(1-e.nativeEvent.contentOffset.y / 250, 1), 1.15))\n      }}>\n        <Animated.Text style={[styles.header, { transform: [ { scale: headerScale} ] }]}>react-native-vault</Animated.Text>\n\n        <Text style={styles.subheader}>Vault Methods</Text>\n        <Button label={"Reset Vault"} onPress={() => {\n          myVault.reset().then(() => { console.log("Reset Vault") })\n        }} />\n        <Button label={"Initialize Vault"} onPress={() => {\n          myVault.initialize(["passwords"]).then(() => { console.log("Initialized Vault") })\n        }} />\n        <Button label={"Get Collection (Data)"} onPress={() => {\n          myVault.getCollectionData("passwords").then(data => { console.log(JSON.stringify(data, null, 2)) })\n        }} />\n        <Button label={"Set Collection"} onPress={() => {\n          myVault.setCollection("passwords", [\n            { password: "123abc", info: "For Account A" },\n            { password: "password123", info: "For Account B" }\n          ]).then(() => { console.log("Set Collection") })\n        }} />\n\n        <Text style={styles.subheader}>Collection Methods (Singular)</Text>\n        <Button label={"Add One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.addOne({ password: "super secret password", info: "For Account C" }).then(() => { console.log("Added One") })\n          })\n        }}/>\n        <Button label={"Set One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.setOne(({ password }) => password == "123abc", { password: "a new password", info: "Some New Info" }).then(() => { console.log("Set One") })\n          })\n        }} />\n        <Button label={"Update One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.updateOne(({ password }) => password == "password123", { password: "a stronger password" }).then(() => { console.log("Updated One") })\n          })\n        }} />\n        <Button label={"Remove One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.removeOne(({ info }) => info == "Some New Info").then(() => { console.log("Removed One") })\n          })\n        }} />\n        <Button label={"Find One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.findOne(({ password }) => password == "super secret password").then(data => { console.log(JSON.stringify(data, null, 2)) })\n          })\n        }} />\n\n        <Text style={styles.subheader}>Collection Methods (Multiple)</Text>\n        <Button label={"Add Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.addMultiple([{ password: "qwerty", info: "For Account D" }, { password: "uiop", info: "For Account E" }]).then(() => { console.log("Added Multiple") })\n          })\n        }} />\n        <Button label={"Set Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.setMultiple(({ password }) => password.length < 8, ({ password}) => { return { password: password + "123", info: "This is a little stronger now" }}).then(() => { console.log("Set Multiple") })\n          })\n        }} />\n        <Button label={"Update Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.updateMultiple(({ password }) => password.slice(password.length - 3) == "123", ({ password }) => { return { password: password + "456" }}).then(() => { console.log("Updated Multiple") })\n          })\n        }} />\n        <Button label={"Remove Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.removeMultiple(({ password }) => password.length < 10).then(() => { console.log("Removed Multiple") })\n          })\n        }} />\n        <Button label={"Find Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.findMultiple(({ password }) => password.length > 15).then(data => { console.log(JSON.stringify(data, null, 2)) })\n          })\n        }} />\n\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  bg: {\n    flex: 1,\n    backgroundColor: "rgb(5, 15, 10)"\n  },\n  container: {\n    alignItems: "center"\n  },\n  header: {\n    fontSize: 32,\n    color: "rgb(120, 250, 200)",\n    textShadowColor: "rgb(120, 250, 200)",\n    textShadowRadius: 8,\n    letterSpacing: 1,\n    marginVertical: 36\n  },\n  subheader: {\n    fontSize: 18,\n    fontWeight: "400",\n    fontStyle: "italic",\n    color: "rgb(120, 250, 200)",\n    marginTop: 20,\n    marginBottom: 15\n  },\n  buttonContainer: {\n    width: 270,\n    height: 70,\n    borderRadius: 20,\n    borderWidth: 0.5,\n    borderColor: "rgb(120, 250, 200)",\n    backgroundColor: "rgb(55, 125, 100)",\n    marginBottom: 20,\n    alignItems: "center",\n    justifyContent: "center"\n  },\n  buttonLabel: {\n    fontSize: 21,\n    fontWeight: "500",\n    color: "rgb(120, 250, 200)",\n    letterSpacing: 0.5\n  }\n})\n\nexport default App'})]})},w=(n(299),function(){return Object(p.jsx)("div",{children:"getting started"})}),y=function(){return Object(p.jsx)(c.a,{children:Object(p.jsxs)(i.c,{children:[Object(p.jsx)(i.a,{path:"/",exact:!0,component:h}),Object(p.jsx)(i.a,{path:"/example",exact:!0,component:j}),Object(p.jsx)(i.a,{path:"/docs/getting-started",exact:!0,component:w})]})})};s.a.render(Object(p.jsx)(y,{}),document.getElementById("root"))},44:function(e,t,n){},45:function(e,t,n){}},[[300,1,2]]]);
//# sourceMappingURL=main.15a94860.chunk.js.map