{"version":3,"sources":["assets/images/logo.svg","pages/home/index.js","pages/example/index.js","pages/example/exampleFile.js","pages/docs/gettingStarted.js","app.js","index.js"],"names":["Home","Fragment","className","src","logo","alt","to","customStyle","width","margin","padding","language","style","atomOneDark","Example","SyntaxHighlighter","registerLanguage","jsx","vscDarkPlus","GettingStarted","App","path","exact","component","GettingStartedDocs","ReactDOM","render","document","getElementById"],"mappings":"wPAAe,G,MAAA,IAA0B,kC,yBCuF1BA,EA5EF,WACT,OACI,eAAC,IAAMC,SAAP,WACI,oCACI,oDACA,qBAAKC,UAAW,gBAAhB,SACI,qBAAKC,IAAKC,EAAMF,UAAW,OAAQG,IAAK,WAE5C,qBAAKH,UAAW,cAAhB,uEACA,cAAC,IAAD,CAAMI,GAAI,uBAAV,yCACA,cAAC,IAAD,CAAMA,GAAI,UAAV,mCAEJ,oCACI,0CACA,qBAAKJ,UAAW,cAAhB,kHACA,qBAAKA,UAAW,cAAhB,mJACA,qBAAKA,UAAW,cAAhB,mIACA,qBAAKA,UAAW,cAAhB,sGAEJ,oCACI,6DACA,qBAAKA,UAAW,kBAAhB,iCACA,cAAC,IAAD,CAAmBK,YAAa,CAAEC,MAAO,yBAA0BC,OAAQ,OAAQC,QAAS,QAAUC,SAAU,OAAQC,MAAOC,IAA/H,4CAKA,qBAAKX,UAAW,kBAAhB,wCACA,cAAC,IAAD,CAAmBK,YAAa,CAAEC,MAAO,yBAA0BC,OAAQ,OAAQC,QAAS,QAAUC,SAAU,OAAQC,MAAOC,IAA/H,+CAMJ,oCACI,4DACA,cAAC,IAAD,CAAmBN,YAAa,CAAEC,MAAO,yBAA0BC,OAAQ,OAAQC,QAAS,QAAUC,SAAU,aAAcC,MAAOC,IAArI,yNAMJ,oCACI,8EACA,qBAAKX,UAAW,kBAAhB,yCACA,cAAC,IAAD,CAAmBK,YAAa,CAAEC,MAAO,yBAA0BC,OAAQ,OAAQC,QAAS,QAAUC,SAAU,aAAcC,MAAOC,IAArI,kJAKA,qBAAKX,UAAW,kBAAhB,qDACA,cAAC,IAAD,CAAmBK,YAAa,CAAEC,MAAO,yBAA0BC,OAAQ,OAAQC,QAAS,QAAUC,SAAU,aAAcC,MAAOC,IAArI,oHAMJ,oCACI,4EACA,qBAAKX,UAAW,kBAAhB,yCACA,cAAC,IAAD,CAAmBK,YAAa,CAAEC,MAAO,yBAA0BC,OAAQ,OAAQC,QAAS,QAAUC,SAAU,aAAcC,MAAOC,IAArI,+NAKA,qBAAKX,UAAW,kBAAhB,qDACA,cAAC,IAAD,CAAmBK,YAAa,CAAEC,MAAO,yBAA0BC,OAAQ,OAAQC,QAAS,QAAUC,SAAU,aAAcC,MAAOC,IAArI,sL,mCCjDDC,EAhBC,WAGZ,OAFAC,IAAkBC,iBAAiB,MAAOC,KAGtC,sBAAKf,UAAW,KAAhB,UACI,cAAC,IAAD,CAAMI,GAAI,IAAV,0BACA,8CACA,cAAC,IAAD,CAAmBC,YAAa,CAAEC,MAAO,0BAA2BC,OAAQ,OAAQC,QAAS,QAAUC,SAAU,MAAOC,MAAOM,IAA/H,SCnBY,8rMCUTC,G,OANQ,WACnB,OACI,oDCgBOC,EAZH,WACR,OACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAM,IAAKC,OAAK,EAACC,UAAWvB,IACnC,cAAC,IAAD,CAAOqB,KAAM,WAAYC,OAAK,EAACC,UAAWT,IAC1C,cAAC,IAAD,CAAOO,KAAM,wBAAyBC,OAAK,EAACC,UAAWC,UCXvEC,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,U","file":"static/js/main.15a94860.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.05ab4565.svg\";","import React from \"react\"\n\nimport \"./styles.scss\"\n\nimport logo from \"../../assets/images/logo.svg\"\n\nimport { Link } from \"react-router-dom\"\n\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { atomOneDark } from \"react-syntax-highlighter/dist/esm/styles/hljs\"\n\nconst Home = () => {\n    return (\n        <React.Fragment>\n            <section>\n                <h1>react-native-vault</h1>\n                <div className={\"logoContainer\"}>\n                    <img src={logo} className={\"logo\"} alt={\"logo\"} />\n                </div>\n                <div className={\"description\"}>A Persistent, Secure, And Local Database For React-Native</div>\n                <Link to={\"docs/getting-started\"}>In Depth Documentation Here</Link>\n                <Link to={\"example\"}>Usage Example Here</Link>\n            </section>\n            <section>\n                <h2>Overview</h2>\n                <div className={\"description\"}>Fundamentally, react-native-vault works by storing encrypted data with react native's async storage.</div>\n                <div className={\"description\"}>With react-native-vault, you can focus on your data and let the encryption, storage, and basic interactions be handled automatically.</div>\n                <div className={\"description\"}>The vault class in react-native-vault allows you to create, access, and set groups of stored data called collections.</div>\n                <div className={\"description\"}>Collections simplify adding to, setting, updating, removing, and finding stored data.</div>\n            </section>\n            <section>\n                <h2>Simple Usage (Installation)</h2>\n                <div className={\"docsDescription\"}>Install the package</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80vw, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"bash\"} style={atomOneDark}>\n                    {\n                        `npm install react-native-vault`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Install the necessary pods</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80vw, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"bash\"} style={atomOneDark}>\n                    {\n                        `cd ios && pod install && cd ..`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Vault Setup)</h2>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80vw, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `import Vault from \"react-native-vault\";\\n\\nconst myVault = new Vault(\"myStorageKey\", \"myEncryptionKey\");\\n\\nmyVault.initialize([\"myCollectionName\"]).then(() => {\\n\\t// Vault has been initialized!\\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Getting Data From Collections)</h2>\n                <div className={\"docsDescription\"}>Using a collection instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80vw, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `myVault.getCollection(\"myCollectionName\").then(collection => {\\nconst data = collection.data;\\n\\t// Do stuff with the data here\\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Directly getting json (not recommended)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80vw, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `myVault.getCollectionData(\"myCollectionName\").then(data => {\\n\\t// Do stuff with the data here\\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Setting Data In Collections)</h2>\n                <div className={\"docsDescription\"}>Using a collection instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80vw, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `const newData = [{ name: \"Jane Doe\" }, { name: \"John Doe\" }];\\nmyVault.getCollection(\"myCollectionName\").then(collection => {\\n\\tcollection.set(newData).then(() => {\\n\\t\\t// Collection has been set\\n\\t});\\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Directly setting json (not recommended)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80vw, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `const newData = [{ name: \"Jane Doe\" }, { name: \"John Doe\" }];\\nmyVault.setCollection(\"myCollectionName\", newData).then(() => {\\n\\t// Collection has been set\\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n        </React.Fragment>\n    )\n}\n\nexport default Home","import React from \"react\"\n\nimport \"./styles.scss\"\n\nimport { Link } from \"react-router-dom\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport jsx from \"react-syntax-highlighter/dist/esm/languages/prism/jsx\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport exampleFileContent from \"./exampleFile\"\n\nconst Example = () => {\n    SyntaxHighlighter.registerLanguage(\"jsx\", jsx)\n\n    return (\n        <div className={\"bg\"}>\n            <Link to={\"/\"}>Back To Home</Link>\n            <h1>Example Code</h1>\n            <SyntaxHighlighter customStyle={{ width: \"calc(min(80vw, 1000px))\", margin: \"auto\", padding: \"15px\" }} language={\"jsx\"} style={vscDarkPlus}>\n                {\n                    exampleFileContent\n                }\n            </SyntaxHighlighter>\n        </div>\n    )\n}\n\nexport default Example","const exampleFileContent = `// App.js\n\nimport React, { useRef } from \"react\"\nimport { StatusBar, SafeAreaView, ScrollView, View, TouchableOpacity, Text, StyleSheet, Animated } from \"react-native\"\n\nimport Vault from \"react-native-vault\"\n\nconst Button = ({ label, onPress }) => {\n  return (\n    <TouchableOpacity activeOpacity={0.8} onPress={onPress}>\n      <View style={styles.buttonContainer}>\n        <Text style={styles.buttonLabel}>\n          {\n            label\n          }\n        </Text>\n      </View>\n    </TouchableOpacity>\n  )\n}\n\nconst App = () => {\n  let headerScale = useRef(new Animated.Value(1)).current\n\n  const myVault = new Vault(\"myVault\", \"super-secret-key\")\n  myVault.initialize([\"passwords\"]).then(() => {\n    console.log(\"Initialized Vault\")\n  })\n\n  return (\n    <SafeAreaView style={styles.bg}>\n      <StatusBar barStyle={\"light-content\"} />\n      <ScrollView contentContainerStyle={styles.container} scrollEventThrottle={4} onScroll={(e) => {\n        headerScale.setValue(Math.min(Math.max(1-e.nativeEvent.contentOffset.y / 250, 1), 1.15))\n      }}>\n        <Animated.Text style={[styles.header, { transform: [ { scale: headerScale} ] }]}>react-native-vault</Animated.Text>\n\n        <Text style={styles.subheader}>Vault Methods</Text>\n        <Button label={\"Reset Vault\"} onPress={() => {\n          myVault.reset().then(() => { console.log(\"Reset Vault\") })\n        }} />\n        <Button label={\"Initialize Vault\"} onPress={() => {\n          myVault.initialize([\"passwords\"]).then(() => { console.log(\"Initialized Vault\") })\n        }} />\n        <Button label={\"Get Collection (Data)\"} onPress={() => {\n          myVault.getCollectionData(\"passwords\").then(data => { console.log(JSON.stringify(data, null, 2)) })\n        }} />\n        <Button label={\"Set Collection\"} onPress={() => {\n          myVault.setCollection(\"passwords\", [\n            { password: \"123abc\", info: \"For Account A\" },\n            { password: \"password123\", info: \"For Account B\" }\n          ]).then(() => { console.log(\"Set Collection\") })\n        }} />\n\n        <Text style={styles.subheader}>Collection Methods (Singular)</Text>\n        <Button label={\"Add One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.addOne({ password: \"super secret password\", info: \"For Account C\" }).then(() => { console.log(\"Added One\") })\n          })\n        }}/>\n        <Button label={\"Set One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.setOne(({ password }) => password == \"123abc\", { password: \"a new password\", info: \"Some New Info\" }).then(() => { console.log(\"Set One\") })\n          })\n        }} />\n        <Button label={\"Update One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.updateOne(({ password }) => password == \"password123\", { password: \"a stronger password\" }).then(() => { console.log(\"Updated One\") })\n          })\n        }} />\n        <Button label={\"Remove One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.removeOne(({ info }) => info == \"Some New Info\").then(() => { console.log(\"Removed One\") })\n          })\n        }} />\n        <Button label={\"Find One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.findOne(({ password }) => password == \"super secret password\").then(data => { console.log(JSON.stringify(data, null, 2)) })\n          })\n        }} />\n\n        <Text style={styles.subheader}>Collection Methods (Multiple)</Text>\n        <Button label={\"Add Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.addMultiple([{ password: \"qwerty\", info: \"For Account D\" }, { password: \"uiop\", info: \"For Account E\" }]).then(() => { console.log(\"Added Multiple\") })\n          })\n        }} />\n        <Button label={\"Set Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.setMultiple(({ password }) => password.length < 8, ({ password}) => { return { password: password + \"123\", info: \"This is a little stronger now\" }}).then(() => { console.log(\"Set Multiple\") })\n          })\n        }} />\n        <Button label={\"Update Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.updateMultiple(({ password }) => password.slice(password.length - 3) == \"123\", ({ password }) => { return { password: password + \"456\" }}).then(() => { console.log(\"Updated Multiple\") })\n          })\n        }} />\n        <Button label={\"Remove Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.removeMultiple(({ password }) => password.length < 10).then(() => { console.log(\"Removed Multiple\") })\n          })\n        }} />\n        <Button label={\"Find Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.findMultiple(({ password }) => password.length > 15).then(data => { console.log(JSON.stringify(data, null, 2)) })\n          })\n        }} />\n\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  bg: {\n    flex: 1,\n    backgroundColor: \"rgb(5, 15, 10)\"\n  },\n  container: {\n    alignItems: \"center\"\n  },\n  header: {\n    fontSize: 32,\n    color: \"rgb(120, 250, 200)\",\n    textShadowColor: \"rgb(120, 250, 200)\",\n    textShadowRadius: 8,\n    letterSpacing: 1,\n    marginVertical: 36\n  },\n  subheader: {\n    fontSize: 18,\n    fontWeight: \"400\",\n    fontStyle: \"italic\",\n    color: \"rgb(120, 250, 200)\",\n    marginTop: 20,\n    marginBottom: 15\n  },\n  buttonContainer: {\n    width: 270,\n    height: 70,\n    borderRadius: 20,\n    borderWidth: 0.5,\n    borderColor: \"rgb(120, 250, 200)\",\n    backgroundColor: \"rgb(55, 125, 100)\",\n    marginBottom: 20,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  buttonLabel: {\n    fontSize: 21,\n    fontWeight: \"500\",\n    color: \"rgb(120, 250, 200)\",\n    letterSpacing: 0.5\n  }\n})\n\nexport default App`\n\nexport default exampleFileContent","import React from \"react\"\n\nimport \"./styles.scss\"\n\nconst GettingStarted = () => {\n    return (\n        <div>getting started</div>\n    )\n}\n\nexport default GettingStarted","import React from \"react\"\n\nimport \"./globals.scss\"\n\nimport { HashRouter, Switch, Route } from \"react-router-dom\"\n\nimport Home from \"./pages/home/index\"\nimport Example from \"./pages/example\"\nimport GettingStartedDocs from \"./pages/docs/gettingStarted\"\n\nconst App = () => {\n    return (\n        <HashRouter>\n            <Switch>\n                <Route path={\"/\"} exact component={Home} />\n                <Route path={\"/example\"} exact component={Example} />\n                <Route path={\"/docs/getting-started\"} exact component={GettingStartedDocs} />\n            </Switch>\n        </HashRouter>\n    )\n}\n\nexport default App","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from \"./app.js\"\n\nReactDOM.render(<App/>, document.getElementById(\"root\"))"],"sourceRoot":""}