{"version":3,"sources":["assets/images/logo.svg","pages/home/index.js","pages/example/index.js","pages/example/exampleFile.js","components/sidebar/index.js","pages/docs/gettingStarted.js","pages/docs/creatingAVault.js","pages/docs/initializingAVault.js","pages/docs/resettingAVault.js","pages/docs/gettingADepositInstance.js","pages/docs/gettingADepositsData.js","pages/docs/settingADepositsData.js","pages/docs/syncingADepositInstance.js","pages/docs/gettingACollectionInstance.js","pages/docs/gettingACollectionsData.js","pages/docs/settingACollectionsData.js","pages/docs/syncingACollectionInstance.js","pages/docs/addingItemsToACollection.js","pages/docs/settingItemsInACollection.js","pages/docs/updatingItemsInACollection.js","pages/docs/removingItemsFromACollection.js","pages/docs/findingItemsInACollection.js","app.js","index.js"],"names":["Home","Fragment","className","src","logo","alt","to","customStyle","width","margin","padding","language","style","atomOneDark","Example","SyntaxHighlighter","registerLanguage","jsx","vscDarkPlus","ContentWithSidebar","children","useState","window","innerWidth","sidebarIsOpen","setSidebarIsOpen","screenIsWide","setScreenIsWide","addEventListener","display","height","onClick","GettingStarted","marginTop","fontSize","href","CreatingAVault","rowSpan","colSpan","InitializingAVault","ResettingAVault","GettingADepositInstance","GettingADepositsData","SettingADepositsData","SyncingADepositInstance","GettingACollectionInstance","GettingACollectionsData","SettingACollectionsData","SyncingACollectionInstance","AddingItemsToACollection","SettingItemsInACollection","UpdatingItemsInACollection","RemovingItemsFromACollection","App","path","exact","component","GettingStartedDocs","FindingItemsInACollection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65ddd7d5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.2c86b2ea.svg\";","import React from \"react\"\n\nimport logo from \"../../assets/images/logo.svg\"\n\nimport { Link } from \"react-router-dom\"\n\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { atomOneDark } from \"react-syntax-highlighter/dist/esm/styles/hljs\"\n\nconst Home = () => {\n    return (\n        <React.Fragment>\n            <section>\n                <h1>react-native-vault</h1>\n                <div className={\"logoContainer\"}>\n                    <img src={logo} className={\"logo\"} alt={\"logo\"} />\n                </div>\n                <div className={\"description\"}>A Persistent, Secure, And Local Database For React-Native</div>\n                <br/>\n                <br/>\n                <Link to={\"/docs/getting-started\"}>In Depth Documentation Here</Link>\n                <Link to={\"/example\"}>Usage Example Here</Link>\n            </section>\n            <section>\n                <h2>Overview</h2>\n                <div className={\"description\"}>Fundamentally, react-native-vault works by storing encrypted data with react native's async storage.</div>\n                <div className={\"description\"}>With react-native-vault, you can focus on your data and let the encryption, storage, and basic interactions be handled automatically.</div>\n                <div className={\"description\"}>The vault class in react-native-vault allows you to create, access, and set groups of stored data in the form of deposits and collections.</div>\n                <div className={\"description\"}>Deposits act as simple key value storage, and are perfect for user preferences or small pieces of data.</div>\n                <div className={\"description\"}>Collections are designed to hold multiple complex pieces of data, and come with helper methods to simplify interactions.</div>\n                <br/>\n                <div className={\"docsDescription\"}>Internal Structure:</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n`<AsyncStorageKeys>: {\n    <vaultId>: {\n        deposits: {\n            name: \"John Doe\",\n            age: 24,\n            married: true,\n            averageMinutesOnApp: 12,\n            averagePickupsPerDay: 2\n        },\n        collections: {\n            family: [\n                {\n                    name: \"Jane Doe\",\n                    age: 22,\n                    married: true\n                },\n                {\n                    name: \"Jason Doe\",\n                    age: 34,\n                    married: false\n                },\n                {\n                    name: \"Jackie Doe\",\n                    age: 26,\n                    married: false\n                }\n            ],\n            friends: [\n                {\n                    name: \"Matthew Perlman\",\n                    age: 15,\n                    married: false\n                },\n                {\n                    name: \"Rafayel Amirkhanyan\",\n                    age: 15,\n                    married: false\n                }\n            ]\n        }\n    }\n}`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Installation)</h2>\n                <div className={\"docsDescription\"}>Install the react-native-vault package</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"bash\"} style={atomOneDark}>\n                    {\n                        `npm install react-native-vault`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Manually install one dependency</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"bash\"} style={atomOneDark}>\n                    {\n                        `npm install @react-native-async-storage/async-storage`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Install the necessary pods</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"bash\"} style={atomOneDark}>\n                    {\n                        `cd ios && pod install && cd ..`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Vault Setup)</h2>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `import Vault from \"react-native-vault\";\\n\\nconst myVault = new Vault(\"myStorageKey\", \"myEncryptionKey\");\\n\\nmyVault.initialize([\"myCollectionName\"]).then(() => {\\n\\t// Vault has been initialized!\\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Getting Data From Deposits)</h2>\n                <div className={\"docsDescription\"}>Using a deposit instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `myVault.getDeposit(\"myDepositName\").then(deposit => {\\n\\tconst { exists, data } = deposit.data;\\n\\t// Do stuff with data here\\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Directly getting json (not recommended)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `myVault.getDepositData(\"myDepositName\").then(depositData => {\\n\\tconst { exists, data } = depositData;\\n\\t// Do stuff with data here\\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Setting Data In Deposits)</h2>\n                <div className={\"docsDescription\"}>Using a deposit instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `const username = \"John Doe\";\\nmyVault.getDeposit(\"myDepositName\").then(deposit => {\\n\\tdeposit.set(username);\\n\\t// Now deposit \"myDepositName\" is set to \"John Doe\"\\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Directly setting json (not recommended)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `const username = \"John Doe\";\\nmyVault.setDeposit(\"myDepositName\", username).then(deposit => {\\n\\t// Now deposit \"myDepositName\" is set to \"John Doe\"\\n})`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Getting Data From Collections)</h2>\n                <div className={\"docsDescription\"}>Using a collection instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `myVault.getCollection(\"myCollectionName\").then(collection => {\\n\\tconst data = collection.data;\\n\\t// Do stuff with the data here\\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Directly getting json (not recommended)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `myVault.getCollectionData(\"myCollectionName\").then(data => {\\n\\t// Do stuff with the data here\\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Setting Data In Collections)</h2>\n                <div className={\"docsDescription\"}>Using a collection instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `const newData = [{ name: \"Jane Doe\" }, { name: \"John Doe\" }];\\nmyVault.getCollection(\"myCollectionName\").then(collection => {\\n\\tcollection.set(newData).then(() => {\\n\\t\\t// Now collection \"myCollectionName\" is set to [{ name: \"Jane Doe\" }, { name: \"John Doe\" }]\\n\\t});\\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Directly setting json (not recommended)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `const newData = [{ name: \"Jane Doe\" }, { name: \"John Doe\" }];\\nmyVault.setCollection(\"myCollectionName\", newData).then(() => {\\n\\t// Now collection \"myCollectionName\" is set to [{ name: \"Jane Doe\" }, { name: \"John Doe\" }]\\n});`\n                    }\n                </SyntaxHighlighter>\n                <Link to={\"/docs/getting-started\"} className={\"button\"}>\n                    <span>Go To Documentation</span>\n                </Link>\n            </section>\n        </React.Fragment>\n    )\n}\n\nexport default Home","import React from \"react\"\n\nimport { Link } from \"react-router-dom\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport jsx from \"react-syntax-highlighter/dist/esm/languages/prism/jsx\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport exampleFileContent from \"./exampleFile\"\n\nconst Example = () => {\n    SyntaxHighlighter.registerLanguage(\"jsx\", jsx)\n\n    return (\n        <section>\n            <Link to={\"/\"}>Back To Home</Link>\n            <h1>Example Code</h1>\n            <SyntaxHighlighter customStyle={{ width: \"calc(min(80vw, 1000px))\", margin: \"auto\", padding: \"15px\" }} language={\"jsx\"} style={vscDarkPlus}>\n                {\n                    exampleFileContent\n                }\n            </SyntaxHighlighter>\n        </section>\n    )\n}\n\nexport default Example","const exampleFileContent = `// App.js\n\nimport React, { useRef } from \"react\"\nimport { StatusBar, SafeAreaView, ScrollView, View, TouchableOpacity, Text, StyleSheet, Animated } from \"react-native\"\n\nimport Vault from \"react-native-vault\"\n\nconst Button = ({ label, onPress }) => {\n  return (\n    <TouchableOpacity activeOpacity={0.8} onPress={onPress}>\n      <View style={styles.buttonContainer}>\n        <Text style={styles.buttonLabel}>\n          {\n            label\n          }\n        </Text>\n      </View>\n    </TouchableOpacity>\n  )\n}\n\nconst App = () => {\n  let headerScale = useRef(new Animated.Value(1)).current\n\n  const myVault = new Vault(\"myVault\", \"super-secret-key\")\n  myVault.initialize([\"passwords\"]).then(() => {\n    console.log(\"Initialized Vault\")\n  })\n\n  return (\n    <SafeAreaView style={styles.bg}>\n      <StatusBar barStyle={\"light-content\"} />\n      <ScrollView contentContainerStyle={styles.container} scrollEventThrottle={4} onScroll={(e) => {\n        headerScale.setValue(Math.min(Math.max(1-e.nativeEvent.contentOffset.y / 250, 1), 1.15))\n      }}>\n        <Animated.Text style={[styles.header, { transform: [ { scale: headerScale} ] }]}>react-native-vault</Animated.Text>\n\n        {\n          // USAGE EXAMPLE BELOW\n          // I recommend actually running this with react native\n        }\n\n        <Text style={styles.subheader}>Vault Methods</Text>\n        <Button label={\"Reset Vault\"} onPress={() => {\n          myVault.reset().then(() => { console.log(\"Reset Vault\") })\n        }} />\n        <Button label={\"Initialize Vault\"} onPress={() => {\n          myVault.initialize([\"passwords\"]).then(() => { console.log(\"Initialized Vault\") })\n        }} />\n        <Button label={\"Get Collection (Data)\"} onPress={() => {\n          myVault.getCollectionData(\"passwords\").then(data => { console.log(JSON.stringify(data, null, 2)) })\n        }} />\n        <Button label={\"Set Collection\"} onPress={() => {\n          myVault.setCollection(\"passwords\", [\n            { password: \"123abc\", info: \"For Account A\" },\n            { password: \"password123\", info: \"For Account B\" }\n          ]).then(() => { console.log(\"Set Collection\") })\n        }} />\n\n        <Text style={styles.subheader}>Deposit Methods</Text>\n        <Button label={\"Get Deposit (Data)\"} onPress={() => {\n          myVault.getDepositData(\"username\").then(data => { console.log(data) })\n        }} />\n        <Button label={\"Set Deposit\"} onPress={() => {\n          myVault.setDeposit(\"username\", \"John Doe\").then(() => { console.log(\"Set Deposit\") })\n        }} />\n        <Button label={\"Remove Deposit\"} onPress={() => {\n          myVault.removeDeposit(\"username\").then(() => { console.log(\"Removed Deposit\") })\n        }} />\n\n        <Text style={styles.subheader}>Collection Methods (Singular)</Text>\n        <Button label={\"Add One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.addOne({ password: \"super secret password\", info: \"For Account C\" }).then(() => { console.log(\"Added One\") })\n          })\n        }}/>\n        <Button label={\"Set One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.setOne(({ password }) => password == \"123abc\", { password: \"a new password\", info: \"Some New Info\" }).then(() => { console.log(\"Set One\") })\n          })\n        }} />\n        <Button label={\"Update One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.updateOne(({ password }) => password == \"password123\", { password: \"a stronger password\" }).then(() => { console.log(\"Updated One\") })\n          })\n        }} />\n        <Button label={\"Remove One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.removeOne(({ info }) => info == \"Some New Info\").then(() => { console.log(\"Removed One\") })\n          })\n        }} />\n        <Button label={\"Find One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.findOne(({ password }) => password == \"super secret password\").then(data => { console.log(JSON.stringify(data, null, 2)) })\n          })\n        }} />\n\n        <Text style={styles.subheader}>Collection Methods (Multiple)</Text>\n        <Button label={\"Add Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.addMultiple([{ password: \"qwerty\", info: \"For Account D\" }, { password: \"uiop\", info: \"For Account E\" }]).then(() => { console.log(\"Added Multiple\") })\n          })\n        }} />\n        <Button label={\"Set Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.setMultiple(({ password }) => password.length < 8, ({ password}) => { return { password: password + \"123\", info: \"This is a little stronger now\" }}).then(() => { console.log(\"Set Multiple\") })\n          })\n        }} />\n        <Button label={\"Update Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.updateMultiple(({ password }) => password.slice(password.length - 3) == \"123\", ({ password }) => { return { password: password + \"456\" }}).then(() => { console.log(\"Updated Multiple\") })\n          })\n        }} />\n        <Button label={\"Remove Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.removeMultiple(({ password }) => password.length < 10).then(() => { console.log(\"Removed Multiple\") })\n          })\n        }} />\n        <Button label={\"Find Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.findMultiple(({ password }) => password.length > 15).then(data => { console.log(JSON.stringify(data, null, 2)) })\n          })\n        }} />\n\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  bg: {\n    flex: 1,\n    backgroundColor: \"rgb(5, 15, 10)\"\n  },\n  container: {\n    alignItems: \"center\"\n  },\n  header: {\n    fontSize: 32,\n    color: \"rgb(120, 250, 200)\",\n    textShadowColor: \"rgb(120, 250, 200)\",\n    textShadowRadius: 8,\n    letterSpacing: 1,\n    marginVertical: 36\n  },\n  subheader: {\n    fontSize: 18,\n    fontWeight: \"400\",\n    fontStyle: \"italic\",\n    color: \"rgb(120, 250, 200)\",\n    marginTop: 20,\n    marginBottom: 15\n  },\n  buttonContainer: {\n    width: 270,\n    height: 70,\n    borderRadius: 20,\n    borderWidth: 0.5,\n    borderColor: \"rgb(120, 250, 200)\",\n    backgroundColor: \"rgb(55, 125, 100)\",\n    marginBottom: 20,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  buttonLabel: {\n    fontSize: 21,\n    fontWeight: \"500\",\n    color: \"rgb(120, 250, 200)\",\n    letterSpacing: 0.5\n  }\n})\n\nexport default App`\n\nexport default exampleFileContent","import React, { useState } from \"react\"\n\nimport \"./styles.scss\"\n\nimport { Link } from \"react-router-dom\"\n\nconst ContentWithSidebar = ({ children }) => {\n    let [ sidebarIsOpen, setSidebarIsOpen ] = useState(window.innerWidth > 600)\n    let [ screenIsWide, setScreenIsWide ] = useState(window.innerWidth > 600)\n\n    window.addEventListener(\"resize\", () => {\n        if(screenIsWide != window.innerWidth > 600)\n        setScreenIsWide(!screenIsWide)\n    })\n\n    return (\n        <React.Fragment>\n            {\n                screenIsWide || sidebarIsOpen ? (\n                    <aside>\n                        <div style={{ display: screenIsWide ? \"none\" : \"block\", height: \"40px\" }}></div>\n                        <div className={\"toggle\"} onClick={() => {\n                            setSidebarIsOpen(!sidebarIsOpen)\n                        }}>&#10005;</div>\n                        <h3>Setup</h3>\n                        <Link to={\"/docs/getting-started\"}>Getting Started</Link>\n                        <h3>Vaults</h3>\n                        <Link to={\"/docs/creating-a-vault\"}>Creating A Vault</Link>\n                        <Link to={\"/docs/initializing-a-vault\"}>Initializing A Vault</Link>\n                        <Link to={\"/docs/resetting-a-vault\"}>Resetting A Vault</Link>\n                        <h3>Deposit</h3>\n                        <Link to={\"/docs/getting-a-deposit-instance\"}>Getting A Deposit Instance</Link>\n                        <Link to={\"/docs/getting-a-deposits-data\"}>Getting A Deposit's Data</Link>\n                        <Link to={\"/docs/setting-a-deposits-data\"}>Setting A Deposit's Data</Link>\n                        <Link to={\"/docs/syncing-a-deposit-instance\"}>Syncing A Deposit Instance</Link>\n                        <h3>Collections</h3>\n                        <Link to={\"/docs/getting-a-collection-instance\"}>Getting A Collection Instance</Link>\n                        <Link to={\"/docs/getting-a-collections-data\"}>Getting A Collection's Data</Link>\n                        <Link to={\"/docs/setting-a-collections-data\"}>Setting A Collection's Data</Link>\n                        <Link to={\"/docs/syncing-a-collection-instance\"}>Syncing A Collection Instance</Link>\n                        <h3>Collection Methods</h3>\n                        <Link to={\"/docs/adding-items-to-a-collection\"}>Adding Items To A Collection</Link>\n                        <Link to={\"/docs/setting-items-in-a-collection\"}>Setting Items In A Collection</Link>\n                        <Link to={\"/docs/updating-items-in-a-collection\"}>Updating Items In A Collection</Link>\n                        <Link to={\"/docs/removing-items-from-a-collection\"}>Removing Items From A Collection</Link>\n                        <Link to={\"/docs/finding-items-in-a-collection\"}>Finding Items In A Collection</Link>\n                    </aside>\n                ) : (\n                    <header>\n                        <h1>Documentation</h1>\n                        <div className={\"toggle\"} onClick={() => {\n                            setSidebarIsOpen(!sidebarIsOpen)\n                        }}>&#9776;</div>\n                    </header>\n                )\n            }\n            <main className={screenIsWide ? \"\" : \"withHeader\"}>\n                {\n                    children\n                }\n            </main>\n        </React.Fragment>\n        \n    )\n}\n\nexport default ContentWithSidebar","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst GettingStarted = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Getting Started</h1>\n                <div className={\"description\"}>The first step for using react-native-vault is installation.</div>\n                <div className={\"description\"}>This should be as simple as running a few commands.</div>\n            </section>\n            <section>\n                <h2>Installing from npm</h2>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"bash\"} style={vscDarkPlus}>\n                    {\n                        `npm install react-native-vault`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Setting up react-native-vault's dependencies</h2>\n                <div className={\"docsDescription\"}>The async storage library must and its corresponding pod must be installed manually</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"bash\"} style={vscDarkPlus}>\n                    {\n                        `npm install @react-native-async-storage/async-storage`\n                    }\n                </SyntaxHighlighter>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", marginTop: \"10px\", padding: \"15px\" }} language={\"bash\"} style={vscDarkPlus}>\n                    {\n                        `cd ios && pod install && cd ..`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>In case of an issue installing async storage, follow the directions <a style={{ display: \"inline\", fontSize: \"24px\" }} href={\"https://react-native-async-storage.github.io/async-storage/docs/install/\"}>here</a></div>\n                <Link to={\"/docs/creating-a-vault\"} className={\"button\"}>\n                    <span>Next Page - Creating A Vault</span>\n                </Link>\n            </section>\n        </ContentWithSidebar>\n        \n    )\n}\n\nexport default GettingStarted","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst CreatingAVault = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Creating A Vault</h1>\n                <div className={\"description\"}>Vaults allow you to store persistent data</div>\n                <div className={\"description\"}>The data in vaults is automatically encrypted by react-native-vault</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <div className={\"docsDescription\"}>Import Vault</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n                        `import Vault from \"react-native-vault\";`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Create A Vault Instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`// Ideally this should be in a place that can be imported from.\n// This way you won't need to instantiate and initialize a new vault every usage.\n\nconst myVault = new Vault(\n    <storageKey>,\n    <encryptionKey>,\n    <options>\n);\n\n// Initialize vault here (See Initializing A Vault)`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th className={\"tableDescription\"}>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>storageKey</td>\n                                <td rowSpan={2}>String</td>\n                                <td className={\"tableDescription\"}>The key the vault will be stored with in async storage. Make sure that if you are using async storage elsewhere in your app that there are no name collisions.</td>\n                                <td>\"vault\"</td>\n                            </tr>\n                            <tr>\n                                <td>encryptionKey</td>\n                                <td className={\"tableDescription\"}>The encryption key that will be used to encrypt the vault. Ideally this should be stored as a secure environment variable. Make sure it is NOT DYNAMIC, or else you will likely run into decryption issues.</td>\n                                <td>Empty String</td>\n                            </tr>\n                            <tr>\n                                <td>options</td>\n                                <td>Object</td>\n                                <td colSpan={2}>See Below</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </section>\n            <section>\n                <h2>Options Argument</h2>\n                <div className={\"description\"}>The options property determines how errors are handled by the vault</div>\n                <div className={\"description\"}>Generally, you can omit this argument, and all errors will be dealt with by console.warn</div>\n                <div className={\"description\"}>If you have specific error handling needs, there are 3 properties you can set for more control</div>\n                <div className={\"tableContainer\"}>\n                    <div className={\"tableTitle\"}>Properties</div>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>onGetStorage</td>\n                                <td rowSpan={3}>Function</td>\n                                <td className={\"tableDescription\"}>This function will be called when an error occurs getting the vault's storageKey from async storage. It will most likely happen because you either forgot to initialize the vault or because you removed the vault's storageKey from async storage.</td>\n                                <td rowSpan={3}>console.warn</td>\n                            </tr>\n                            <tr>\n                                <td>onSetStorage</td>\n                                <td className={\"tableDescription\"}>This function will be called when an error occurs setting the vault's storageKey in async storage.</td>\n                            </tr>\n                            <tr>\n                                <td>onDecryptionFail</td>\n                                <td className={\"tableDescription\"}>This function will be called when an error occurs decrypting the data the persistent data in the vault. This will most likely happen because you either changed your encryptionKey after setting data or because you externally set the vault's storageKey in async storage.</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/getting-started\"} className={\"button\"}>\n                        <span>Last Page - Getting Started</span>\n                    </Link>\n                    <Link to={\"/docs/initializing-a-vault\"} className={\"button\"}>\n                        <span>Next Page - Initializing A Vault</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default CreatingAVault","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst InitializingAVault = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Initializing A Vault</h1>\n                <div className={\"description\"}>Vaults must be initialized before they can be used</div>\n                <div className={\"description\"}>They should also be initialized after they have been reset</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myVault.initialize(<collectionIds>).then(() => {\n    // You can safely use this vault now\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th className={\"tableDescription\"}>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>collectionIds</td>\n                                <td>Array&lt;String&gt;</td>\n                                <td className={\"tableDescription\"}>The ids of the collections you want so store in the vault. For example, if you wanted to store family and friends as two collections, you would set this to [\"family\", \"friends\"].</td>\n                                <td><strong>Argument Is Required</strong></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/creating-a-vault\"} className={\"button\"}>\n                        <span>Last Page - Creating A Vault</span>\n                    </Link>\n                    <Link to={\"/docs/resetting-a-vault\"} className={\"button\"}>\n                        <span>Next Page - Resetting A Vault</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default InitializingAVault","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst ResettingAVault = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Resetting A Vault</h1>\n                <div className={\"description\"}>During development, it can be very helpful to fully reset all the data in a vault</div>\n                <div className={\"description\"}>This can be used to simulate a user who has not yet used the app</div>\n                <div className={\"description\"}>You can reset a vault in production but its is HIGHLY discouraged, and is likely to cause issues if not properly initialized after</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n                        `myVault.reset().then(() => {\\n\\t// Vault has been reset, you most likely should initialize it here before trying to use it again\\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/initializing-a-vault\"} className={\"button\"}>\n                        <span>Last Page - Initializing A Vault</span>\n                    </Link>\n                    <Link to={\"/docs/getting-a-deposit-instance\"} className={\"button\"}>\n                        <span>Next Page - Getting A Deposit Instance</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default ResettingAVault","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst GettingADepositInstance = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Getting A Deposit Instance</h1>\n                <div className={\"description\"}>Deposit instances are easy to use and increase performance by virtualizing their own data</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <div className={\"docsDescription\"}>Remember that if the deposit it refers to is changed externally, you MUST sync the deposit instance's data (See Syncing A Deposit Instance)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`let [myDeposit, setMyDeposit] = useState(false);\n\nuseEffect(() => {\n    if(myDeposit === false){\n        myVault.getDeposit(<depositId>).then(setMyDeposit);\n    };\n}, [myDeposit]);\n\n// Always check that myDeposit !== false before attempting to use it`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>depositId</td>\n                                <td>String</td>\n                                <td className={\"tableDescription\"}>The id of the deposit you are getting an instance of.</td>\n                                <td><strong>Argument Is Required</strong></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/resetting-a-vault\"} className={\"button\"}>\n                        <span>Last Page - Resetting A Vault</span>\n                    </Link>\n                    <Link to={\"/docs/getting-a-deposits-data\"} className={\"button\"}>\n                        <span>Next Page - Getting A Deposit's Data</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default GettingADepositInstance","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst GettingADepositsData = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Getting A Deposit's Data</h1>\n                <div className={\"description\"}>There are 2 ways to get the data stored in a deposit:</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <div className={\"docsDescription\"}>With a deposit instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`const { exists, data } = myDeposit.data;`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Through a vault</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myVault.getDepositData(<depositId>).then(depositData => {\n    const { exists, data } = depositData;\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>depositId</td>\n                                <td>String</td>\n                                <td className={\"tableDescription\"}>The id of the deposit you are getting data from.</td>\n                                <td><strong>Argument Is Required</strong></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/getting-a-deposit-instance\"} className={\"button\"}>\n                        <span>Last Page - Getting A Deposit Instance</span>\n                    </Link>\n                    <Link to={\"/docs/setting-a-deposits-data\"} className={\"button\"}>\n                        <span>Next Page - Setting A Deposit's Data</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default GettingADepositsData","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst SettingADepositsData = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Setting A Deposit's Data</h1>\n                <div className={\"description\"}>There are 2 ways to set the data in a deposit:</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <div className={\"docsDescription\"}>With a deposit instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myDeposit.set(<value>).then(() => {\n    // Deposit has been set\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Through a vault</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myVault.setDeposit(<depositId>, <value>).then(() => {\n    // Deposit has been set\n    // At this point you MUST sync any deposits that refer to the depositId you provided, otherwise they will not be up to date\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>depositId</td>\n                                <td>String</td>\n                                <td className={\"tableDescription\"}>The id of the deposit you are setting.</td>\n                                <td rowSpan={2}><strong>Argument Is Required</strong></td>\n                            </tr>\n                            <tr>\n                                <td>value</td>\n                                <td>Any</td>\n                                <td className={\"tableDescription\"}>The value you are setting the data of the target deposit to.</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/getting-a-deposits-data\"} className={\"button\"}>\n                        <span>Last Page - Getting A Deposit's Data</span>\n                    </Link>\n                    <Link to={\"/docs/syncing-a-deposit-instance\"} className={\"button\"}>\n                        <span>Next Page - Syncing A Deposit Instance</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default SettingADepositsData","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst SyncingADepositInstance = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Syncing A Deposit Instance</h1>\n                <div className={\"description\"}>When a deposit is changed from a source other than itself it MUST be synced after</div>\n                <div className={\"description\"}>Deposit instances virtualize their data, so their data is only updated from its own methods</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myDeposit.syncData().then(() => {\n    // deposit data is now up to date\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/setting-a-deposits-data\"} className={\"button\"}>\n                        <span>Last Page - Setting A Deposit's Data</span>\n                    </Link>\n                    <Link to={\"/docs/getting-a-collection-instance\"} className={\"button\"}>\n                        <span>Next Page - Getting A Collection Instance</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default SyncingADepositInstance","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst GettingACollectionInstance = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Getting A Collection Instance</h1>\n                <div className={\"description\"}>Collection instances are easy to use and increase performance by virtualizing their own data</div>\n                <div className={\"description\"}>They also have helper methods to simplify interactions</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <div className={\"docsDescription\"}>Remember that if the collection it refers to is changed externally, you MUST sync the collection instance's data (See Syncing A Collection Instance)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`let [myCollection, setMyCollection] = useState(false);\n\nuseEffect(() => {\n    if(myCollection === false){\n        myVault.getCollection(<collectionId>).then(setMyCollection);\n    };\n}, [myCollection]);\n\n// Always check that myCollection !== false before attempting to use it`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>collectionId</td>\n                                <td>String</td>\n                                <td className={\"tableDescription\"}>The id of the collection you are getting an instance of.</td>\n                                <td><strong>Argument Is Required</strong></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/syncing-a-deposit-instance\"} className={\"button\"}>\n                        <span>Last Page - Syncing A Deposit Instance</span>\n                    </Link>\n                    <Link to={\"/docs/getting-a-collections-data\"} className={\"button\"}>\n                        <span>Next Page - Getting A Collection's Data</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default GettingACollectionInstance","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst GettingACollectionsData = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Getting A Collection's Data</h1>\n                <div className={\"description\"}>There are 2 ways to get the data stored in a collection:</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <div className={\"docsDescription\"}>With a collection instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`const data = myCollection.data;`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Through a vault</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myVault.getCollectionData(<collectionId>).then(data => {\n    // Do something with data here\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>collectionId</td>\n                                <td>String</td>\n                                <td className={\"tableDescription\"}>The id of the collection you are getting data from.</td>\n                                <td><strong>Argument Is Required</strong></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/getting-a-collection-instance\"} className={\"button\"}>\n                        <span>Last Page - Getting A Collection Instance</span>\n                    </Link>\n                    <Link to={\"/docs/setting-a-collections-data\"} className={\"button\"}>\n                        <span>Next Page - Setting A Collection's Data</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default GettingACollectionsData","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst SettingACollectionsData = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Setting A Collection's Data</h1>\n                <div className={\"description\"}>There are 2 ways to set the data in a collection:</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <div className={\"docsDescription\"}>With a collection instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.set(<value>).then(() => {\n    // Collection has been set\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Through a vault</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myVault.setCollection(<collectionId>, <value>).then(() => {\n    // Collection has been set\n    // At this point you MUST sync any collections that refer to the collectionId you provided, otherwise they will not be up to date\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>collectionId</td>\n                                <td>String</td>\n                                <td className={\"tableDescription\"}>The id of the collection you are setting.</td>\n                                <td rowSpan={2}><strong>Argument Is Required</strong></td>\n                            </tr>\n                            <tr>\n                                <td>value</td>\n                                <td>Array&lt;Object&gt;</td>\n                                <td className={\"tableDescription\"}>The value you are setting the data of the collection to. For each object in the array, if the object does not include the \"_uuid\" property, one will be generated automatically.</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/getting-a-collections-data\"} className={\"button\"}>\n                        <span>Last Page - Getting A Collection's Data</span>\n                    </Link>\n                    <Link to={\"/docs/syncing-a-collection-instance\"} className={\"button\"}>\n                        <span>Next Page - Syncing A Collection Instance</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default SettingACollectionsData","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst SyncingACollectionInstance = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Syncing A Collection Instance</h1>\n                <div className={\"description\"}>When a collection is changed from a source other than itself it MUST be synced after</div>\n                <div className={\"description\"}>Collection instances virtualize their data, so their data is only updated from its own methods</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.syncData().then(() => {\n    // collection data is now up to date\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/setting-a-collections-data\"} className={\"button\"}>\n                        <span>Last Page - Setting A Collection's Data</span>\n                    </Link>\n                    <Link to={\"/docs/adding-items-to-a-collection\"} className={\"button\"}>\n                        <span>Next Page - Adding Items To A Collection</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default SyncingACollectionInstance","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst AddingItemsToACollection = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Adding Items To A Collection</h1>\n                <div className={\"description\"}></div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <div className={\"docsDescription\"}>Adding one item</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.addOne(<value>).then(() => {\n    // Finished adding one\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Adding multiple items</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.addMultiple(<values>).then(() => {\n    // Finished adding multiple\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>value</td>\n                                <td>Object</td>\n                                <td className={\"tableDescription\"}>The value you are adding to the collection. If it does not include a \"_uuid\" property, one will be generated automatically.</td>\n                                <td rowSpan={2}><strong>Argument Is Required</strong></td>\n                            </tr>\n                            <tr>\n                                <td>values</td>\n                                <td>Array&lt;Object&gt;</td>\n                                <td className={\"tableDescription\"}>The values you are adding to the collection. For each object in the array, if the object does not include the \"_uuid\" property, one will be generated automatically.</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/syncing-a-collection-instance\"} className={\"button\"}>\n                        <span>Last Page - Syncing A Collection Instance</span>\n                    </Link>\n                    <Link to={\"/docs/setting-items-in-a-collection\"} className={\"button\"}>\n                        <span>Next Page - Setting Items In A Collection</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default AddingItemsToACollection","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst SettingItemsInACollection = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Setting Items In A Collection</h1>\n                <div className={\"description\"}>These collection methods allow you to set certain items based on the test function or uuid you pass in</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <div className={\"docsDescription\"}>Set one item by test (first found)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.setOne(<test>, <value>).then(() => {\n    // Finished setting one\n    // If no items pass the test function provided, you will get a warning in the console (won't effect functionality)\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Set one item by uuid (first found)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.setOneByUuid(<uuid>, <value>).then(() => {\n    // Finished setting one by uuid\n    // If no items matched the uuid provided, you will get a warning in the console (won't effect functionality)\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Set multiple by test</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.setMultiple(<test>, <valueCallback>).then(() => {\n    // Finished setting multiple\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Set multiple by uuids</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.setMultipleByUuids(<uuids>, <valueCallback>).then(() => {\n    // Finished setting multiple by uuids\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>test</td>\n                                <td>Function &rarr; Boolean</td>\n                                <td className={\"tableDescription\"}>This function will be executed for every item in the collection, with the current item passed in. If the result of the function is truthy, it will set the item with the value or valueCallback provided.</td>\n                                <td rowSpan={5}><strong>Argument Is Required</strong></td>\n                            </tr>\n                            <tr>\n                                <td>uuid</td>\n                                <td>String</td>\n                                <td className={\"tableDescription\"}>The uuid of the item that should be set to the value provided.</td>\n                            </tr>\n                            <tr>\n                                <td>uuids</td>\n                                <td>Array&lt;String&gt;</td>\n                                <td className={\"tableDescription\"}>The uuids of the items that should be set to the valueCallback provided.</td>\n                            </tr>\n                            <tr>\n                                <td>value</td>\n                                <td>Object</td>\n                                <td className={\"tableDescription\"}>The value the item should be set to. If it does not includes a \"_uuid\" property, one will be generated automatically.</td>\n                            </tr>\n                            <tr>\n                                <td>valueCallback</td>\n                                <td>Function &rarr; Object</td>\n                                <td className={\"tableDescription\"}>This argument allows multiple items to be set dynamically. For each item that passes the test function, the item will be passed into this function, and will then be set to the function's result. If the result does not include a \"_uuid\" property, one will be generated automatically.</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/adding-items-to-a-collection\"} className={\"button\"}>\n                        <span>Last Page - Adding Items To A Collection</span>\n                    </Link>\n                    <Link to={\"/docs/updating-items-in-a-collection\"} className={\"button\"}>\n                        <span>Next Page - Updating Items In A Collection</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default SettingItemsInACollection","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst UpdatingItemsInACollection = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Updating Items In A Collection</h1>\n                <div className={\"description\"}>These collection methods allow you to update certain items based on the test function or uuid you pass in</div>\n                <div className={\"description\"}>In updating, the item will be merged with the value using Object.assign</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <div className={\"docsDescription\"}>Update one item by test (first found)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.updateOne(<test>, <value>).then(() => {\n    // Finished updating one\n    // If no items pass the test function provided, you will get a warning in the console (won't effect functionality)\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Update one item by uuid (first found)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.updateOneByUuid(<uuid>, <value>).then(() => {\n    // Finished updating one by uuid\n    // If no items matched the uuid provided, you will get a warning in the console (won't effect functionality)\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Update multiple by test</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.updateMultiple(<test>, <valueCallback>).then(() => {\n    // Finished updating multiple\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Update multiple by uuids</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.updateMultipleByUuids(<uuids>, <valueCallback>).then(() => {\n    // Finished updating multiple by uuids\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>test</td>\n                                <td>Function &rarr; Boolean</td>\n                                <td className={\"tableDescription\"}>This function will be executed for every item in the collection, with the current item passed in. If the result of the function is truthy, it will update the item with the value or valueCallback provided.</td>\n                                <td rowSpan={5}><strong>Argument Is Required</strong></td>\n                            </tr>\n                            <tr>\n                                <td>uuid</td>\n                                <td>String</td>\n                                <td className={\"tableDescription\"}>The uuid of the item that should be updated with the value provided.</td>\n                            </tr>\n                            <tr>\n                                <td>uuids</td>\n                                <td>Array&lt;String&gt;</td>\n                                <td className={\"tableDescription\"}>The uuids of the items that should be updated with the valueCallback provided.</td>\n                            </tr>\n                            <tr>\n                                <td>value</td>\n                                <td>Object</td>\n                                <td className={\"tableDescription\"}>The value the item should be updated with.</td>\n                            </tr>\n                            <tr>\n                                <td>valueCallback</td>\n                                <td>Function &rarr; Object</td>\n                                <td className={\"tableDescription\"}>This argument allows multiple items to be updated dynamically. For each item that passes the test function, the item will be passed into this function, and will then be updated with the function's result.</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/setting-items-in-a-collection\"} className={\"button\"}>\n                        <span>Last Page - Setting Items In A Collection</span>\n                    </Link>\n                    <Link to={\"/docs/removing-items-from-a-collection\"} className={\"button\"}>\n                        <span>Next Page - Removing Items From A Collection</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default UpdatingItemsInACollection","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst RemovingItemsFromACollection = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Removing Items From A Collection</h1>\n                <div className={\"description\"}>These collection methods allow you to remove certain items based on the test function or uuid you pass in</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <div className={\"docsDescription\"}>Remove one item by test (first found)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.removeOne(<test>).then(() => {\n    // Finished updating one\n    // If no items pass the test function provided, you will get a warning in the console (won't effect functionality)\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Remove one item by uuid (first found)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.removeOneByUuid(<uuid>).then(() => {\n    // Finished updating one by uuid\n    // If no items matched the uuid provided, you will get a warning in the console (won't effect functionality)\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Remove multiple by test</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.removeMultiple(<test>).then(() => {\n    // Finished updating multiple\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Remove multiple by uuids</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.removeMultipleByUuids(<uuids>).then(() => {\n    // Finished updating multiple by uuids\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>test</td>\n                                <td>Function &rarr; Boolean</td>\n                                <td className={\"tableDescription\"}>This function will be executed for every item in the collection, with the current item passed in. If the result of the function is truthy, it will remove the item from the collection.</td>\n                                <td rowSpan={5}><strong>Argument Is Required</strong></td>\n                            </tr>\n                            <tr>\n                                <td>uuid</td>\n                                <td>String</td>\n                                <td className={\"tableDescription\"}>The uuid of the item that should be removed from the collection.</td>\n                            </tr>\n                            <tr>\n                                <td>uuids</td>\n                                <td>Array&lt;String&gt;</td>\n                                <td className={\"tableDescription\"}>The uuids of the items that should be removed from the collection.</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/updating-items-in-a-collection\"} className={\"button\"}>\n                        <span>Last Page - Updating Items In A Collection</span>\n                    </Link>\n                    <Link to={\"/docs/finding-items-in-a-collection\"} className={\"button\"}>\n                        <span>Next Page - Finding Items In A Collection</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default RemovingItemsFromACollection","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst RemovingItemsFromACollection = () => {\n    return (\n        <ContentWithSidebar>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Finding Items In A Collection</h1>\n                <div className={\"description\"}>These collection methods allow you to find certain items based on the test function or uuid you pass in</div>\n            </section>\n            <section>\n                <h2>Usage</h2>\n                <div className={\"docsDescription\"}>Find one item by test (first found)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.findOne(<test>).then(item => {\n    if(item != null){\n        // Found item\n    };\n    // If no item matched the test provided, you will get a warning in the console and the returned item will be null\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Find one item by uuid (first found)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.findOneByUuid(<uuid>).then(item => {\n    if(item != null){\n        // Found item\n    };\n    // If no item matched the uuid provided, you will get a warning in the console and the returned item will be null\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Find multiple by test</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.findMultiple(<test>).then(items => {\n    // items is an array of the found collection items, and if none were found it will be empty\n    // Finished finding multiple\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Find multiple by uuids</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n`myCollection.findMultipleByUuids(<test>).then(items => {\n    // items is an array of the found collection items, and if none were found it will be empty\n    // Finished finding multiple by uuids\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>test</td>\n                                <td>Function &rarr; Boolean</td>\n                                <td className={\"tableDescription\"}>This function will be executed for every item in the collection, with the current item passed in. If the result of the function is truthy, it will consider the item as found.</td>\n                                <td rowSpan={5}><strong>Argument Is Required</strong></td>\n                            </tr>\n                            <tr>\n                                <td>uuid</td>\n                                <td>String</td>\n                                <td className={\"tableDescription\"}>The uuid of the item that should be found from the collection.</td>\n                            </tr>\n                            <tr>\n                                <td>uuids</td>\n                                <td>Array&lt;String&gt;</td>\n                                <td className={\"tableDescription\"}>The uuids of the items that should be found from the collection.</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/removing-items-from-a-collection\"} className={\"button\"}>\n                        <span>Last Page - Removing Items From A Collection</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default RemovingItemsFromACollection","import React from \"react\"\n\nimport \"./styles.scss\"\n\nimport { HashRouter, Switch, Route } from \"react-router-dom\"\n\nimport Home from \"./pages/home/index\"\nimport Example from \"./pages/example\"\n\nimport GettingStartedDocs from \"./pages/docs/gettingStarted\"\n\nimport CreatingAVault from \"./pages/docs/creatingAVault\"\nimport InitializingAVault from \"./pages/docs/initializingAVault\"\nimport ResettingAVault from \"./pages/docs/resettingAVault\"\n\nimport GettingADepositInstance from \"./pages/docs/gettingADepositInstance\"\nimport GettingADepositsData from \"./pages/docs/gettingADepositsData\"\nimport SettingADepositsData from \"./pages/docs/settingADepositsData\"\nimport SyncingADepositInstance from \"./pages/docs/syncingADepositInstance\"\n\nimport GettingACollectionInstance from \"./pages/docs/gettingACollectionInstance\"\nimport GettingACollectionsData from \"./pages/docs/gettingACollectionsData\"\nimport SettingACollectionsData from \"./pages/docs/settingACollectionsData\"\nimport SyncingACollectionInstance from \"./pages/docs/syncingACollectionInstance\"\n\nimport AddingItemsToACollection from \"./pages/docs/addingItemsToACollection\"\nimport SettingItemsInACollection from \"./pages/docs/settingItemsInACollection\"\nimport UpdatingItemsInACollection from \"./pages/docs/updatingItemsInACollection\"\nimport RemovingItemsFromACollection from \"./pages/docs/removingItemsFromACollection\"\nimport FindingItemsInACollection from \"./pages/docs/findingItemsInACollection\"\n\nconst App = () => {\n    return (\n        <HashRouter>\n            <Switch>\n                <Route path={\"/\"} exact component={Home} />\n                <Route path={\"/example\"} exact component={Example} />\n\n                <Route path={\"/docs/getting-started\"} exact component={GettingStartedDocs} />\n\n                <Route path={\"/docs/creating-a-vault\"} exact component={CreatingAVault} />\n                <Route path={\"/docs/initializing-a-vault\"} exact component={InitializingAVault} />\n                <Route path={\"/docs/resetting-a-vault\"} exact component={ResettingAVault} />\n\n                <Route path={\"/docs/getting-a-deposit-instance\"} exact component={GettingADepositInstance} />\n                <Route path={\"/docs/getting-a-deposits-data\"} exact component={GettingADepositsData} />\n                <Route path={\"/docs/setting-a-deposits-data\"} exact component={SettingADepositsData} />\n                <Route path={\"/docs/syncing-a-deposit-instance\"} exact component={SyncingADepositInstance} />\n\n                <Route path={\"/docs/getting-a-collection-instance\"} exact component={GettingACollectionInstance} />\n                <Route path={\"/docs/getting-a-collections-data\"} exact component={GettingACollectionsData} />\n                <Route path={\"/docs/setting-a-collections-data\"} exact component={SettingACollectionsData} />\n                <Route path={\"/docs/syncing-a-collection-instance\"} exact component={SyncingACollectionInstance} />\n\n                <Route path={\"/docs/adding-items-to-a-collection\"} exact component={AddingItemsToACollection} />\n                <Route path={\"/docs/setting-items-in-a-collection\"} exact component={SettingItemsInACollection} />\n                <Route path={\"/docs/updating-items-in-a-collection\"} exact component={UpdatingItemsInACollection} />\n                <Route path={\"/docs/removing-items-from-a-collection\"} exact component={RemovingItemsFromACollection} />\n                <Route path={\"/docs/finding-items-in-a-collection\"} exact component={FindingItemsInACollection} />\n            </Switch>\n        </HashRouter>\n    )\n}\n\nexport default App","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from \"./app.js\"\n\nReactDOM.render(<App/>, document.getElementById(\"root\"))"],"sourceRoot":""}