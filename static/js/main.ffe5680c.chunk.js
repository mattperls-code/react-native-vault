(this["webpackJsonpreact-native-vault-docs"]=this["webpackJsonpreact-native-vault-docs"]||[]).push([[0],{298:function(e,t,n){},299:function(e,t,n){"use strict";n.r(t);var s=n(1),a=n.n(s),i=n(33),c=n.n(i),o=(n(45),n(2)),l=n(3),r=n.p+"static/media/logo.2c86b2ea.svg",d=n(304),h=n(301),j=n(0),u=function(){return Object(j.jsxs)(a.a.Fragment,{children:[Object(j.jsxs)("section",{children:[Object(j.jsx)("h1",{children:"react-native-vault"}),Object(j.jsx)("div",{className:"logoContainer",children:Object(j.jsx)("img",{src:r,className:"logo",alt:"logo"})}),Object(j.jsx)("div",{className:"description",children:"A Persistent, Secure, And Local Database For React-Native"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)(o.b,{to:"/docs/getting-started",children:"In Depth Documentation Here"}),Object(j.jsx)(o.b,{to:"/example",children:"Usage Example Here"})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Overview"}),Object(j.jsx)("div",{className:"description",children:"Fundamentally, react-native-vault works by storing encrypted data with react native's async storage."}),Object(j.jsx)("div",{className:"description",children:"With react-native-vault, you can focus on your data and let the encryption, storage, and basic interactions be handled automatically."}),Object(j.jsx)("div",{className:"description",children:"The vault class in react-native-vault allows you to create, access, and set groups of stored data in the form of deposits and collections."}),Object(j.jsx)("div",{className:"description",children:"Deposits act as simple key value storage, and are perfect for user preferences or small pieces of data."}),Object(j.jsx)("div",{className:"description",children:"Collections are designed to hold multiple complex pieces of data, and come with helper methods to simplify interactions."}),Object(j.jsx)("br",{}),Object(j.jsx)("div",{className:"docsDescription",children:"Internal Structure:"}),Object(j.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:h.a,children:'<AsyncStorageKeys>: {\n    <vaultId>: {\n        deposits: {\n            name: "John Doe",\n            age: 24,\n            married: true,\n            averageMinutesOnApp: 12,\n            averagePickupsPerDay: 2\n        },\n        collections: {\n            family: [\n                {\n                    name: "Jane Doe",\n                    age: 22,\n                    married: true\n                },\n                {\n                    name: "Jason Doe",\n                    age: 34,\n                    married: false\n                },\n                {\n                    name: "Jackie Doe",\n                    age: 26,\n                    married: false\n                }\n            ],\n            friends: [\n                {\n                    name: "Matthew Perlman",\n                    age: 15,\n                    married: false\n                },\n                {\n                    name: "Rafayel Amirkhanyan",\n                    age: 14,\n                    married: false\n                }\n            ]\n        }\n    }\n}'})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Simple Usage (Installation)"}),Object(j.jsx)("div",{className:"docsDescription",children:"Install the react-native-vault package"}),Object(j.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"bash",style:h.a,children:"npm install react-native-vault"}),Object(j.jsx)("div",{className:"docsDescription",children:"Manually install one dependency"}),Object(j.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"bash",style:h.a,children:"npm install @react-native-async-storage/async-storage"}),Object(j.jsx)("div",{className:"docsDescription",children:"Install the necessary pods"}),Object(j.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"bash",style:h.a,children:"cd ios && pod install && cd .."})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Simple Usage (Vault Setup)"}),Object(j.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:h.a,children:'import Vault from "react-native-vault";\n\nconst myVault = new Vault("myStorageKey", "myEncryptionKey");\n\nmyVault.initialize(["myCollectionName"]).then(() => {\n\t// Vault has been initialized!\n});'})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Simple Usage (Getting Data From Deposits)"}),Object(j.jsx)("div",{className:"docsDescription",children:"Using a deposit instance"}),Object(j.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:h.a,children:'myVault.getDeposit("myDepositName").then(deposit => {\n\tconst { exists, data } = deposit.data;\n\t// Do stuff with data here\n});'}),Object(j.jsx)("div",{className:"docsDescription",children:"Directly getting json (not recommended)"}),Object(j.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:h.a,children:'myVault.getDepositData("myDepositName").then(depositData => {\n\tconst { exists, data } = depositData;\n\t// Do stuff with data here\n});'})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Simple Usage (Setting Data In Deposits)"}),Object(j.jsx)("div",{className:"docsDescription",children:"Using a deposit instance"}),Object(j.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:h.a,children:'const username = "John Doe";\nmyVault.getDeposit("myDepositName").then(deposit => {\n\tdeposit.set(username);\n\t// Now deposit "myDepositName" is set to "John Doe"\n});'}),Object(j.jsx)("div",{className:"docsDescription",children:"Directly setting json (not recommended)"}),Object(j.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:h.a,children:'const username = "John Doe";\nmyVault.setDeposit("myDepositName", username).then(deposit => {\n\t// Now deposit "myDepositName" is set to "John Doe"\n})'})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Simple Usage (Getting Data From Collections)"}),Object(j.jsx)("div",{className:"docsDescription",children:"Using a collection instance"}),Object(j.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:h.a,children:'myVault.getCollection("myCollectionName").then(collection => {\n\tconst data = collection.data;\n\t// Do stuff with the data here\n});'}),Object(j.jsx)("div",{className:"docsDescription",children:"Directly getting json (not recommended)"}),Object(j.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:h.a,children:'myVault.getCollectionData("myCollectionName").then(data => {\n\t// Do stuff with the data here\n});'})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Simple Usage (Setting Data In Collections)"}),Object(j.jsx)("div",{className:"docsDescription",children:"Using a collection instance"}),Object(j.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:h.a,children:'const newData = [{ name: "Jane Doe" }, { name: "John Doe" }];\nmyVault.getCollection("myCollectionName").then(collection => {\n\tcollection.set(newData).then(() => {\n\t\t// Now collection "myCollectionName" is set to [{ name: "Jane Doe" }, { name: "John Doe" }]\n\t});\n});'}),Object(j.jsx)("div",{className:"docsDescription",children:"Directly setting json (not recommended)"}),Object(j.jsx)(d.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:h.a,children:'const newData = [{ name: "Jane Doe" }, { name: "John Doe" }];\nmyVault.setCollection("myCollectionName", newData).then(() => {\n\t// Now collection "myCollectionName" is set to [{ name: "Jane Doe" }, { name: "John Doe" }]\n});'})]})]})},p=n(302),m=n(39),b=n(303),x=function(){return p.a.registerLanguage("jsx",m.a),Object(j.jsxs)("section",{children:[Object(j.jsx)(o.b,{to:"/",children:"Back To Home"}),Object(j.jsx)("h1",{children:"Example Code"}),Object(j.jsx)(p.a,{customStyle:{width:"calc(min(80vw, 1000px))",margin:"auto",padding:"15px"},language:"jsx",style:b.a,children:'// App.js\n\nimport React, { useRef } from "react"\nimport { StatusBar, SafeAreaView, ScrollView, View, TouchableOpacity, Text, StyleSheet, Animated } from "react-native"\n\nimport Vault from "react-native-vault"\n\nconst Button = ({ label, onPress }) => {\n  return (\n    <TouchableOpacity activeOpacity={0.8} onPress={onPress}>\n      <View style={styles.buttonContainer}>\n        <Text style={styles.buttonLabel}>\n          {\n            label\n          }\n        </Text>\n      </View>\n    </TouchableOpacity>\n  )\n}\n\nconst App = () => {\n  let headerScale = useRef(new Animated.Value(1)).current\n\n  const myVault = new Vault("myVault", "super-secret-key")\n  myVault.initialize(["passwords"]).then(() => {\n    console.log("Initialized Vault")\n  })\n\n  return (\n    <SafeAreaView style={styles.bg}>\n      <StatusBar barStyle={"light-content"} />\n      <ScrollView contentContainerStyle={styles.container} scrollEventThrottle={4} onScroll={(e) => {\n        headerScale.setValue(Math.min(Math.max(1-e.nativeEvent.contentOffset.y / 250, 1), 1.15))\n      }}>\n        <Animated.Text style={[styles.header, { transform: [ { scale: headerScale} ] }]}>react-native-vault</Animated.Text>\n\n        {\n          // USAGE EXAMPLE BELOW\n          // I recommend actually running this with react native\n        }\n\n        <Text style={styles.subheader}>Vault Methods</Text>\n        <Button label={"Reset Vault"} onPress={() => {\n          myVault.reset().then(() => { console.log("Reset Vault") })\n        }} />\n        <Button label={"Initialize Vault"} onPress={() => {\n          myVault.initialize(["passwords"]).then(() => { console.log("Initialized Vault") })\n        }} />\n        <Button label={"Get Collection (Data)"} onPress={() => {\n          myVault.getCollectionData("passwords").then(data => { console.log(JSON.stringify(data, null, 2)) })\n        }} />\n        <Button label={"Set Collection"} onPress={() => {\n          myVault.setCollection("passwords", [\n            { password: "123abc", info: "For Account A" },\n            { password: "password123", info: "For Account B" }\n          ]).then(() => { console.log("Set Collection") })\n        }} />\n\n        <Text style={styles.subheader}>Deposit Methods</Text>\n        <Button label={"Get Deposit (Data)"} onPress={() => {\n          myVault.getDepositData("username").then(data => { console.log(data) })\n        }} />\n        <Button label={"Set Deposit"} onPress={() => {\n          myVault.setDeposit("username", "John Doe").then(() => { console.log("Set Deposit") })\n        }} />\n        <Button label={"Remove Deposit"} onPress={() => {\n          myVault.removeDeposit("username").then(() => { console.log("Removed Deposit") })\n        }} />\n\n        <Text style={styles.subheader}>Collection Methods (Singular)</Text>\n        <Button label={"Add One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.addOne({ password: "super secret password", info: "For Account C" }).then(() => { console.log("Added One") })\n          })\n        }}/>\n        <Button label={"Set One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.setOne(({ password }) => password == "123abc", { password: "a new password", info: "Some New Info" }).then(() => { console.log("Set One") })\n          })\n        }} />\n        <Button label={"Update One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.updateOne(({ password }) => password == "password123", { password: "a stronger password" }).then(() => { console.log("Updated One") })\n          })\n        }} />\n        <Button label={"Remove One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.removeOne(({ info }) => info == "Some New Info").then(() => { console.log("Removed One") })\n          })\n        }} />\n        <Button label={"Find One"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.findOne(({ password }) => password == "super secret password").then(data => { console.log(JSON.stringify(data, null, 2)) })\n          })\n        }} />\n\n        <Text style={styles.subheader}>Collection Methods (Multiple)</Text>\n        <Button label={"Add Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.addMultiple([{ password: "qwerty", info: "For Account D" }, { password: "uiop", info: "For Account E" }]).then(() => { console.log("Added Multiple") })\n          })\n        }} />\n        <Button label={"Set Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.setMultiple(({ password }) => password.length < 8, ({ password}) => { return { password: password + "123", info: "This is a little stronger now" }}).then(() => { console.log("Set Multiple") })\n          })\n        }} />\n        <Button label={"Update Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.updateMultiple(({ password }) => password.slice(password.length - 3) == "123", ({ password }) => { return { password: password + "456" }}).then(() => { console.log("Updated Multiple") })\n          })\n        }} />\n        <Button label={"Remove Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.removeMultiple(({ password }) => password.length < 10).then(() => { console.log("Removed Multiple") })\n          })\n        }} />\n        <Button label={"Find Multiple"} onPress={() => {\n          myVault.getCollection("passwords").then(collection => {\n            collection.findMultiple(({ password }) => password.length > 15).then(data => { console.log(JSON.stringify(data, null, 2)) })\n          })\n        }} />\n\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  bg: {\n    flex: 1,\n    backgroundColor: "rgb(5, 15, 10)"\n  },\n  container: {\n    alignItems: "center"\n  },\n  header: {\n    fontSize: 32,\n    color: "rgb(120, 250, 200)",\n    textShadowColor: "rgb(120, 250, 200)",\n    textShadowRadius: 8,\n    letterSpacing: 1,\n    marginVertical: 36\n  },\n  subheader: {\n    fontSize: 18,\n    fontWeight: "400",\n    fontStyle: "italic",\n    color: "rgb(120, 250, 200)",\n    marginTop: 20,\n    marginBottom: 15\n  },\n  buttonContainer: {\n    width: 270,\n    height: 70,\n    borderRadius: 20,\n    borderWidth: 0.5,\n    borderColor: "rgb(120, 250, 200)",\n    backgroundColor: "rgb(55, 125, 100)",\n    marginBottom: 20,\n    alignItems: "center",\n    justifyContent: "center"\n  },\n  buttonLabel: {\n    fontSize: 21,\n    fontWeight: "500",\n    color: "rgb(120, 250, 200)",\n    letterSpacing: 0.5\n  }\n})\n\nexport default App'})]})},g=(n(298),function(e){e.sidebarContent;var t=e.children;return Object(j.jsxs)(a.a.Fragment,{children:[Object(j.jsx)("aside",{}),Object(j.jsx)("main",{children:t})]})}),y=function(){return Object(j.jsxs)(g,{sidebarContent:[],children:[Object(j.jsxs)("section",{children:[Object(j.jsx)(o.b,{to:"/",children:"Back To Home"}),Object(j.jsx)("h1",{children:"Documentation - Getting Started (Installation)"}),Object(j.jsx)("div",{className:"description",children:"The first step for using react-native-vault is installation."}),Object(j.jsx)("div",{className:"description",children:"This should be as simple as running a few commands."})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Installing from npm"}),Object(j.jsx)(p.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"bash",style:b.a,children:"npm install react-native-vault"})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Setting up react-native-vault's dependencies"}),Object(j.jsx)("div",{className:"docsDescription",children:"The async storage library must and its corresponding pod must be installed manually"}),Object(j.jsx)(p.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"bash",style:b.a,children:"npm install @react-native-async-storage/async-storage"}),Object(j.jsx)(p.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",marginTop:"10px",padding:"15px"},language:"bash",style:b.a,children:"cd ios && pod install && cd .."}),Object(j.jsxs)("div",{className:"docsDescription",children:["In case of an issue installing async storage, follow the directions ",Object(j.jsx)("a",{style:{display:"inline",fontSize:"24px"},href:"https://react-native-async-storage.github.io/async-storage/docs/install/",children:"here"})]}),Object(j.jsx)(o.b,{to:"/docs/create-a-vault",className:"button",children:Object(j.jsx)("span",{children:"Next Page - Create A Vault"})})]})]})},O=function(){return Object(j.jsxs)(g,{sidebarContent:[],children:[Object(j.jsxs)("section",{children:[Object(j.jsx)(o.b,{to:"/",children:"Back To Home"}),Object(j.jsx)("h1",{children:"Documentation - Create A Vault"}),Object(j.jsx)("div",{className:"description",children:"Vaults allow you to store persistent data"}),Object(j.jsx)("div",{className:"description",children:"The data in vaults is automatically encrypted by react-native-vault"})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Basic Usage"}),Object(j.jsx)("div",{className:"docsDescription",children:"Import Vault"}),Object(j.jsx)(p.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:b.a,children:'import Vault from "react-native-vault";'}),Object(j.jsx)("div",{className:"docsDescription",children:"Create A Vault Instance"}),Object(j.jsx)(p.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:b.a,children:"// Ideally this should be in a place that can be imported from.\n// This way you won't need to instantiate and initialize a new vault every usage.\n\nconst myVault = new Vault(\n\t<storageKey>,\n\t<encryptionKey>,\n\t<options>\n);"}),Object(j.jsx)("div",{className:"docsDescription",children:"Initialize The Vault"}),Object(j.jsx)(p.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:b.a,children:"// You MUST do this or else the vault will not work\n// You must also initialize the vault after the reset method is called\n\nmyVault.initialize(<collectionIds>).then(() => {\n\t// You can safely use this vault now\n});"})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Arguments"}),Object(j.jsx)("div",{className:"tableContainer",children:Object(j.jsxs)("table",{children:[Object(j.jsx)("thead",{children:Object(j.jsxs)("tr",{children:[Object(j.jsx)("th",{children:"Name"}),Object(j.jsx)("th",{children:"Type"}),Object(j.jsx)("th",{className:"tableDescription",children:"Description"}),Object(j.jsx)("th",{children:"Default"})]})}),Object(j.jsxs)("tbody",{children:[Object(j.jsxs)("tr",{children:[Object(j.jsx)("td",{children:"storageKey"}),Object(j.jsx)("td",{children:"String"}),Object(j.jsx)("td",{className:"tableDescription",children:"The key the vault will be stored with in async storage. Make sure that if you are using async storage elsewhere in your app that there are no name collisions."}),Object(j.jsx)("td",{children:'"vault"'})]}),Object(j.jsxs)("tr",{children:[Object(j.jsx)("td",{children:"encryptionKey"}),Object(j.jsx)("td",{children:"String"}),Object(j.jsx)("td",{className:"tableDescription",children:"The encryption key that will be used to encrypt the vault. Ideally this should be stored as a secure environment variable. Make sure it is NOT DYNAMIC, or else you will likely run into decryption issues."}),Object(j.jsx)("td",{children:"Empty String"})]}),Object(j.jsxs)("tr",{children:[Object(j.jsx)("td",{children:"options"}),Object(j.jsx)("td",{children:"Object"}),Object(j.jsx)("td",{colSpan:2,children:"See Below"})]}),Object(j.jsxs)("tr",{children:[Object(j.jsx)("td",{children:"collectionIds"}),Object(j.jsx)("td",{children:"Array<String>"}),Object(j.jsx)("td",{className:"tableDescription",children:'The ids of the collections you want so store in the vault. For example, if you wanted to store family and friends as two collections, you would set this to ["family", "friends"].'}),Object(j.jsx)("td",{children:"Empty Array"})]})]})]})})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Options Argument"}),Object(j.jsx)("div",{className:"description",children:"The options property determines how errors are handled by the vault"}),Object(j.jsx)("div",{className:"description",children:"Generally, you can omit this argument, and all errors will be dealt with by console.warn"}),Object(j.jsx)("div",{className:"description",children:"If you have specific error handling needs, there are 3 properties you can set for more control"}),Object(j.jsxs)("div",{className:"tableContainer",children:[Object(j.jsx)("div",{className:"tableTitle",children:"Properties"}),Object(j.jsxs)("table",{children:[Object(j.jsx)("thead",{children:Object(j.jsxs)("tr",{children:[Object(j.jsx)("th",{children:"Name"}),Object(j.jsx)("th",{children:"Type"}),Object(j.jsx)("th",{children:"Description"}),Object(j.jsx)("th",{children:"Default"})]})}),Object(j.jsxs)("tbody",{children:[Object(j.jsxs)("tr",{children:[Object(j.jsx)("td",{children:"onGetStorage"}),Object(j.jsx)("td",{rowSpan:3,children:"Function"}),Object(j.jsx)("td",{className:"tableDescription",children:"This function will be called when an error occurs getting the vault's storageKey from async storage. It will most likely happen because you either forgot to initialize the vault or because you removed the vault's storageKey from async storage."}),Object(j.jsx)("td",{rowSpan:3,children:"console.warn"})]}),Object(j.jsxs)("tr",{children:[Object(j.jsx)("td",{children:"onSetStorage"}),Object(j.jsx)("td",{className:"tableDescription",children:"This function will be called when an error occurs setting the vault's storageKey in async storage."})]}),Object(j.jsxs)("tr",{children:[Object(j.jsx)("td",{children:"onDecryptionFail"}),Object(j.jsx)("td",{className:"tableDescription",children:"This function will be called when an error occurs decrypting the data the persistent data in the vault. This will most likely happen because you either changed your encryptionKey after setting data or because you externally set the vault's storageKey in async storage."})]})]})]})]}),Object(j.jsxs)("div",{className:"navContainer",children:[Object(j.jsx)(o.b,{to:"/docs/getting-started",className:"button",children:Object(j.jsx)("span",{children:"Last Page - Getting Started"})}),Object(j.jsx)(o.b,{to:"/docs/reset-a-vault",className:"button",children:Object(j.jsx)("span",{children:"Next Page - Reset A Vault"})})]})]})]})},v=function(){return Object(j.jsxs)(g,{sidebarContent:[],children:[Object(j.jsxs)("section",{children:[Object(j.jsx)(o.b,{to:"/",children:"Back To Home"}),Object(j.jsx)("h1",{children:"Documentation - Reset A Vault"}),Object(j.jsx)("div",{className:"description",children:"During development, it can be very helpful to fully reset all the data in a vault"}),Object(j.jsx)("div",{className:"description",children:"This can be used to simulate a user who has not yet used the app"}),Object(j.jsx)("div",{className:"description",children:"You can reset a vault in production but its is HIGHLY discouraged, and is likely to cause issues if not properly initialized after"})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Vault Reset Method"}),Object(j.jsx)(p.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:b.a,children:"myVault.reset().then(() => {\n\t// Vault has been reset, you most likely should initialize it here before trying to use it again\n});"}),Object(j.jsxs)("div",{className:"navContainer",children:[Object(j.jsx)(o.b,{to:"/docs/create-a-vault",className:"button",children:Object(j.jsx)("span",{children:"Last Page - Create A Vault"})}),Object(j.jsx)(o.b,{to:"/docs/using-deposits",className:"button",children:Object(j.jsx)("span",{children:"Next Page - Using Deposits"})})]})]})]})},w=function(){return Object(j.jsxs)(g,{sidebarContent:[],children:[Object(j.jsxs)("section",{children:[Object(j.jsx)(o.b,{to:"/",children:"Back To Home"}),Object(j.jsx)("h1",{children:"Documentation - Using Deposits"}),Object(j.jsx)("div",{className:"description",children:"Deposits allow you to store basic key value pairs in a vault"}),Object(j.jsx)("div",{className:"description",children:"Deposits require no initialization and are very simple to use"}),Object(j.jsx)("div",{className:"description",children:"You can interact with deposits through a deposit instance or directly through a vault"})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Getting A Deposit Instance And Its Data"}),Object(j.jsx)("div",{className:"docsDescription",children:"Deposit instances are the most effective way to interact with deposits"}),Object(j.jsx)(p.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:b.a,children:"// Using React.useState and React.useEffect\nlet [myDeposit, setMyDeposit] = useState(false);\n\nuseEffect(() => {\n\tif(myDeposit === false){\n\t\tmyVault.getDeposit(<depositId>).then(deposit => {\n\t\t\t// IMPORTANT: deposits use their own internal data, so their internal methods WILL update the data, but external methods from a vault or other deposit instance WILL NOT. (See syncData method of deposit)\n\t\t\tsetMyDeposit(deposit);\n\t\t};\n\t} else {\n\t\tconst { exists, data } = myDeposit.data;\n\t};\n});\n\n// Now you can use this deposit without having to get it from the vault every use (which saves time and improves performance)\n// Just make sure myDeposit has been retrieved from async storage before you try to use it"}),Object(j.jsx)("div",{className:"docsDescription",children:"If you only need to access the deposit's data once you can use the getDepositData method"}),Object(j.jsx)(p.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:b.a,children:"myVault.getDepositData(<depositId>).then(depositData => {\n\tconst { exists, data } = depositData;\n\t// Do stuff with data here\n\t// This data will NOT UPDATE when the vault itself is changed, which is why this method is intended for one time use\n});"})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Setting / Creating A Deposit"}),Object(j.jsx)("div",{className:"description",children:"You can set a deposit to any valid json. Keep in mind that functions are not serializable, and therefore cannot be stored."}),Object(j.jsx)("div",{className:"description",children:"When you set a deposit, if it does not exist already it will create a new deposit, otherwise it will write over the existing deposit."}),Object(j.jsx)("div",{className:"docsDescription",children:"Setting a deposit through an instance"}),Object(j.jsx)(p.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:b.a,children:"myDeposit.set(<value>).then(() => {\n\t// Finished setting deposit value\n});"}),Object(j.jsx)("div",{className:"docsDescription",children:"Setting a deposit through a vault"}),Object(j.jsx)(p.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:b.a,children:"myVault.setDeposit(<depositId>, <value>).then(() => {\n\t// Finished setting deposit value\n\t// If you are using any deposit instances, you should sync their data here (see below)\n});"})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Syncing A Deposit Instance's Data"}),Object(j.jsx)("div",{className:"description",children:"Whenever the value a deposit refers to is set by a vault or a different deposit instance you MUST sync its data, otherwise its data will not be up to date"}),Object(j.jsx)(p.a,{customStyle:{width:"calc(min(80%, 600px))",margin:"auto",padding:"15px"},language:"javascript",style:b.a,children:"myDeposit.syncData().then(() => {\n\t// The data in myDeposit is now up to data\n});"})]}),Object(j.jsxs)("section",{children:[Object(j.jsx)("h2",{children:"Arguments"}),Object(j.jsx)("div",{className:"tableContainer",children:Object(j.jsxs)("table",{children:[Object(j.jsx)("thead",{children:Object(j.jsxs)("tr",{children:[Object(j.jsx)("th",{children:"Name"}),Object(j.jsx)("th",{children:"Type"}),Object(j.jsx)("th",{children:"Description"}),Object(j.jsx)("th",{children:"Default"})]})}),Object(j.jsxs)("tbody",{children:[Object(j.jsxs)("tr",{children:[Object(j.jsx)("td",{children:"depositId"}),Object(j.jsx)("td",{children:"String"}),Object(j.jsx)("td",{className:"tableDescription",children:"The id of the deposit you are retrieving from or setting in the vault."}),Object(j.jsx)("td",{rowSpan:2,children:Object(j.jsx)("strong",{children:"Argument Is Required"})})]}),Object(j.jsxs)("tr",{children:[Object(j.jsx)("td",{children:"value"}),Object(j.jsx)("td",{children:"Any"}),Object(j.jsx)("td",{className:"tableDescription",children:"The value you are setting the data of the target deposit to."})]})]})]})}),Object(j.jsxs)("div",{className:"navContainer",children:[Object(j.jsx)(o.b,{to:"/docs/reset-a-vault",className:"button",children:Object(j.jsx)("span",{children:"Last Page - Reset A Vault"})}),Object(j.jsx)(o.b,{to:"/docs/using-collections",className:"button",children:Object(j.jsx)("span",{children:"Next Page - Using Collections"})})]})]})]})},D=function(){return Object(j.jsx)(o.a,{children:Object(j.jsxs)(l.c,{children:[Object(j.jsx)(l.a,{path:"/",exact:!0,component:u}),Object(j.jsx)(l.a,{path:"/example",exact:!0,component:x}),Object(j.jsx)(l.a,{path:"/docs/getting-started",exact:!0,component:y}),Object(j.jsx)(l.a,{path:"/docs/reset-a-vault",exact:!0,component:v}),Object(j.jsx)(l.a,{path:"/docs/create-a-vault",exact:!0,component:O}),Object(j.jsx)(l.a,{path:"/docs/using-deposits",exact:!0,component:w})]})})};c.a.render(Object(j.jsx)(D,{}),document.getElementById("root"))},45:function(e,t,n){}},[[299,1,2]]]);
//# sourceMappingURL=main.ffe5680c.chunk.js.map