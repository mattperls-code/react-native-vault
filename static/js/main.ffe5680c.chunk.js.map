{"version":3,"sources":["assets/images/logo.svg","pages/home/index.js","pages/example/index.js","pages/example/exampleFile.js","components/sidebar/index.js","pages/docs/gettingStarted.js","pages/docs/createAVault.js","pages/docs/resetAVault.js","pages/docs/usingDeposits.js","app.js","index.js"],"names":["Home","Fragment","className","src","logo","alt","to","customStyle","width","margin","padding","language","style","atomOneDark","Example","SyntaxHighlighter","registerLanguage","jsx","vscDarkPlus","ContentWithSidebar","sidebarContent","children","GettingStarted","marginTop","display","fontSize","href","CreateAVault","colSpan","rowSpan","ResetAVault","UsingDeposits","App","path","exact","component","GettingStartedDocs","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffe5680c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.2c86b2ea.svg\";","import React from \"react\"\n\nimport logo from \"../../assets/images/logo.svg\"\n\nimport { Link } from \"react-router-dom\"\n\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { atomOneDark } from \"react-syntax-highlighter/dist/esm/styles/hljs\"\n\nconst Home = () => {\n    return (\n        <React.Fragment>\n            <section>\n                <h1>react-native-vault</h1>\n                <div className={\"logoContainer\"}>\n                    <img src={logo} className={\"logo\"} alt={\"logo\"} />\n                </div>\n                <div className={\"description\"}>A Persistent, Secure, And Local Database For React-Native</div>\n                <br/>\n                <br/>\n                <Link to={\"/docs/getting-started\"}>In Depth Documentation Here</Link>\n                <Link to={\"/example\"}>Usage Example Here</Link>\n            </section>\n            <section>\n                <h2>Overview</h2>\n                <div className={\"description\"}>Fundamentally, react-native-vault works by storing encrypted data with react native's async storage.</div>\n                <div className={\"description\"}>With react-native-vault, you can focus on your data and let the encryption, storage, and basic interactions be handled automatically.</div>\n                <div className={\"description\"}>The vault class in react-native-vault allows you to create, access, and set groups of stored data in the form of deposits and collections.</div>\n                <div className={\"description\"}>Deposits act as simple key value storage, and are perfect for user preferences or small pieces of data.</div>\n                <div className={\"description\"}>Collections are designed to hold multiple complex pieces of data, and come with helper methods to simplify interactions.</div>\n                <br/>\n                <div className={\"docsDescription\"}>Internal Structure:</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n`<AsyncStorageKeys>: {\n    <vaultId>: {\n        deposits: {\n            name: \"John Doe\",\n            age: 24,\n            married: true,\n            averageMinutesOnApp: 12,\n            averagePickupsPerDay: 2\n        },\n        collections: {\n            family: [\n                {\n                    name: \"Jane Doe\",\n                    age: 22,\n                    married: true\n                },\n                {\n                    name: \"Jason Doe\",\n                    age: 34,\n                    married: false\n                },\n                {\n                    name: \"Jackie Doe\",\n                    age: 26,\n                    married: false\n                }\n            ],\n            friends: [\n                {\n                    name: \"Matthew Perlman\",\n                    age: 15,\n                    married: false\n                },\n                {\n                    name: \"Rafayel Amirkhanyan\",\n                    age: 14,\n                    married: false\n                }\n            ]\n        }\n    }\n}`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Installation)</h2>\n                <div className={\"docsDescription\"}>Install the react-native-vault package</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"bash\"} style={atomOneDark}>\n                    {\n                        `npm install react-native-vault`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Manually install one dependency</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"bash\"} style={atomOneDark}>\n                    {\n                        `npm install @react-native-async-storage/async-storage`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Install the necessary pods</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"bash\"} style={atomOneDark}>\n                    {\n                        `cd ios && pod install && cd ..`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Vault Setup)</h2>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `import Vault from \"react-native-vault\";\\n\\nconst myVault = new Vault(\"myStorageKey\", \"myEncryptionKey\");\\n\\nmyVault.initialize([\"myCollectionName\"]).then(() => {\\n\\t// Vault has been initialized!\\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Getting Data From Deposits)</h2>\n                <div className={\"docsDescription\"}>Using a deposit instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `myVault.getDeposit(\"myDepositName\").then(deposit => {\\n\\tconst { exists, data } = deposit.data;\\n\\t// Do stuff with data here\\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Directly getting json (not recommended)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `myVault.getDepositData(\"myDepositName\").then(depositData => {\\n\\tconst { exists, data } = depositData;\\n\\t// Do stuff with data here\\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Setting Data In Deposits)</h2>\n                <div className={\"docsDescription\"}>Using a deposit instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `const username = \"John Doe\";\\nmyVault.getDeposit(\"myDepositName\").then(deposit => {\\n\\tdeposit.set(username);\\n\\t// Now deposit \"myDepositName\" is set to \"John Doe\"\\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Directly setting json (not recommended)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `const username = \"John Doe\";\\nmyVault.setDeposit(\"myDepositName\", username).then(deposit => {\\n\\t// Now deposit \"myDepositName\" is set to \"John Doe\"\\n})`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Getting Data From Collections)</h2>\n                <div className={\"docsDescription\"}>Using a collection instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `myVault.getCollection(\"myCollectionName\").then(collection => {\\n\\tconst data = collection.data;\\n\\t// Do stuff with the data here\\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Directly getting json (not recommended)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `myVault.getCollectionData(\"myCollectionName\").then(data => {\\n\\t// Do stuff with the data here\\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Simple Usage (Setting Data In Collections)</h2>\n                <div className={\"docsDescription\"}>Using a collection instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `const newData = [{ name: \"Jane Doe\" }, { name: \"John Doe\" }];\\nmyVault.getCollection(\"myCollectionName\").then(collection => {\\n\\tcollection.set(newData).then(() => {\\n\\t\\t// Now collection \"myCollectionName\" is set to [{ name: \"Jane Doe\" }, { name: \"John Doe\" }]\\n\\t});\\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Directly setting json (not recommended)</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={atomOneDark}>\n                    {\n                        `const newData = [{ name: \"Jane Doe\" }, { name: \"John Doe\" }];\\nmyVault.setCollection(\"myCollectionName\", newData).then(() => {\\n\\t// Now collection \"myCollectionName\" is set to [{ name: \"Jane Doe\" }, { name: \"John Doe\" }]\\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n        </React.Fragment>\n    )\n}\n\nexport default Home","import React from \"react\"\n\nimport { Link } from \"react-router-dom\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport jsx from \"react-syntax-highlighter/dist/esm/languages/prism/jsx\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport exampleFileContent from \"./exampleFile\"\n\nconst Example = () => {\n    SyntaxHighlighter.registerLanguage(\"jsx\", jsx)\n\n    return (\n        <section>\n            <Link to={\"/\"}>Back To Home</Link>\n            <h1>Example Code</h1>\n            <SyntaxHighlighter customStyle={{ width: \"calc(min(80vw, 1000px))\", margin: \"auto\", padding: \"15px\" }} language={\"jsx\"} style={vscDarkPlus}>\n                {\n                    exampleFileContent\n                }\n            </SyntaxHighlighter>\n        </section>\n    )\n}\n\nexport default Example","const exampleFileContent = `// App.js\n\nimport React, { useRef } from \"react\"\nimport { StatusBar, SafeAreaView, ScrollView, View, TouchableOpacity, Text, StyleSheet, Animated } from \"react-native\"\n\nimport Vault from \"react-native-vault\"\n\nconst Button = ({ label, onPress }) => {\n  return (\n    <TouchableOpacity activeOpacity={0.8} onPress={onPress}>\n      <View style={styles.buttonContainer}>\n        <Text style={styles.buttonLabel}>\n          {\n            label\n          }\n        </Text>\n      </View>\n    </TouchableOpacity>\n  )\n}\n\nconst App = () => {\n  let headerScale = useRef(new Animated.Value(1)).current\n\n  const myVault = new Vault(\"myVault\", \"super-secret-key\")\n  myVault.initialize([\"passwords\"]).then(() => {\n    console.log(\"Initialized Vault\")\n  })\n\n  return (\n    <SafeAreaView style={styles.bg}>\n      <StatusBar barStyle={\"light-content\"} />\n      <ScrollView contentContainerStyle={styles.container} scrollEventThrottle={4} onScroll={(e) => {\n        headerScale.setValue(Math.min(Math.max(1-e.nativeEvent.contentOffset.y / 250, 1), 1.15))\n      }}>\n        <Animated.Text style={[styles.header, { transform: [ { scale: headerScale} ] }]}>react-native-vault</Animated.Text>\n\n        {\n          // USAGE EXAMPLE BELOW\n          // I recommend actually running this with react native\n        }\n\n        <Text style={styles.subheader}>Vault Methods</Text>\n        <Button label={\"Reset Vault\"} onPress={() => {\n          myVault.reset().then(() => { console.log(\"Reset Vault\") })\n        }} />\n        <Button label={\"Initialize Vault\"} onPress={() => {\n          myVault.initialize([\"passwords\"]).then(() => { console.log(\"Initialized Vault\") })\n        }} />\n        <Button label={\"Get Collection (Data)\"} onPress={() => {\n          myVault.getCollectionData(\"passwords\").then(data => { console.log(JSON.stringify(data, null, 2)) })\n        }} />\n        <Button label={\"Set Collection\"} onPress={() => {\n          myVault.setCollection(\"passwords\", [\n            { password: \"123abc\", info: \"For Account A\" },\n            { password: \"password123\", info: \"For Account B\" }\n          ]).then(() => { console.log(\"Set Collection\") })\n        }} />\n\n        <Text style={styles.subheader}>Deposit Methods</Text>\n        <Button label={\"Get Deposit (Data)\"} onPress={() => {\n          myVault.getDepositData(\"username\").then(data => { console.log(data) })\n        }} />\n        <Button label={\"Set Deposit\"} onPress={() => {\n          myVault.setDeposit(\"username\", \"John Doe\").then(() => { console.log(\"Set Deposit\") })\n        }} />\n        <Button label={\"Remove Deposit\"} onPress={() => {\n          myVault.removeDeposit(\"username\").then(() => { console.log(\"Removed Deposit\") })\n        }} />\n\n        <Text style={styles.subheader}>Collection Methods (Singular)</Text>\n        <Button label={\"Add One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.addOne({ password: \"super secret password\", info: \"For Account C\" }).then(() => { console.log(\"Added One\") })\n          })\n        }}/>\n        <Button label={\"Set One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.setOne(({ password }) => password == \"123abc\", { password: \"a new password\", info: \"Some New Info\" }).then(() => { console.log(\"Set One\") })\n          })\n        }} />\n        <Button label={\"Update One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.updateOne(({ password }) => password == \"password123\", { password: \"a stronger password\" }).then(() => { console.log(\"Updated One\") })\n          })\n        }} />\n        <Button label={\"Remove One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.removeOne(({ info }) => info == \"Some New Info\").then(() => { console.log(\"Removed One\") })\n          })\n        }} />\n        <Button label={\"Find One\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.findOne(({ password }) => password == \"super secret password\").then(data => { console.log(JSON.stringify(data, null, 2)) })\n          })\n        }} />\n\n        <Text style={styles.subheader}>Collection Methods (Multiple)</Text>\n        <Button label={\"Add Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.addMultiple([{ password: \"qwerty\", info: \"For Account D\" }, { password: \"uiop\", info: \"For Account E\" }]).then(() => { console.log(\"Added Multiple\") })\n          })\n        }} />\n        <Button label={\"Set Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.setMultiple(({ password }) => password.length < 8, ({ password}) => { return { password: password + \"123\", info: \"This is a little stronger now\" }}).then(() => { console.log(\"Set Multiple\") })\n          })\n        }} />\n        <Button label={\"Update Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.updateMultiple(({ password }) => password.slice(password.length - 3) == \"123\", ({ password }) => { return { password: password + \"456\" }}).then(() => { console.log(\"Updated Multiple\") })\n          })\n        }} />\n        <Button label={\"Remove Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.removeMultiple(({ password }) => password.length < 10).then(() => { console.log(\"Removed Multiple\") })\n          })\n        }} />\n        <Button label={\"Find Multiple\"} onPress={() => {\n          myVault.getCollection(\"passwords\").then(collection => {\n            collection.findMultiple(({ password }) => password.length > 15).then(data => { console.log(JSON.stringify(data, null, 2)) })\n          })\n        }} />\n\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  bg: {\n    flex: 1,\n    backgroundColor: \"rgb(5, 15, 10)\"\n  },\n  container: {\n    alignItems: \"center\"\n  },\n  header: {\n    fontSize: 32,\n    color: \"rgb(120, 250, 200)\",\n    textShadowColor: \"rgb(120, 250, 200)\",\n    textShadowRadius: 8,\n    letterSpacing: 1,\n    marginVertical: 36\n  },\n  subheader: {\n    fontSize: 18,\n    fontWeight: \"400\",\n    fontStyle: \"italic\",\n    color: \"rgb(120, 250, 200)\",\n    marginTop: 20,\n    marginBottom: 15\n  },\n  buttonContainer: {\n    width: 270,\n    height: 70,\n    borderRadius: 20,\n    borderWidth: 0.5,\n    borderColor: \"rgb(120, 250, 200)\",\n    backgroundColor: \"rgb(55, 125, 100)\",\n    marginBottom: 20,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  buttonLabel: {\n    fontSize: 21,\n    fontWeight: \"500\",\n    color: \"rgb(120, 250, 200)\",\n    letterSpacing: 0.5\n  }\n})\n\nexport default App`\n\nexport default exampleFileContent","import React from \"react\"\n\nimport \"./styles.scss\"\n\nconst ContentWithSidebar = ({ sidebarContent, children }) => {\n    return (\n        <React.Fragment>\n            <aside>\n\n            </aside>\n            <main>\n                {\n                    children\n                }\n            </main>\n        </React.Fragment>\n        \n    )\n}\n\nexport default ContentWithSidebar","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst GettingStarted = () => {\n    return (\n        <ContentWithSidebar sidebarContent={[]}>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Documentation - Getting Started (Installation)</h1>\n                <div className={\"description\"}>The first step for using react-native-vault is installation.</div>\n                <div className={\"description\"}>This should be as simple as running a few commands.</div>\n            </section>\n            <section>\n                <h2>Installing from npm</h2>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"bash\"} style={vscDarkPlus}>\n                    {\n                        `npm install react-native-vault`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Setting up react-native-vault's dependencies</h2>\n                <div className={\"docsDescription\"}>The async storage library must and its corresponding pod must be installed manually</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"bash\"} style={vscDarkPlus}>\n                    {\n                        `npm install @react-native-async-storage/async-storage`\n                    }\n                </SyntaxHighlighter>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", marginTop: \"10px\", padding: \"15px\" }} language={\"bash\"} style={vscDarkPlus}>\n                    {\n                        `cd ios && pod install && cd ..`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>In case of an issue installing async storage, follow the directions <a style={{ display: \"inline\", fontSize: \"24px\" }} href={\"https://react-native-async-storage.github.io/async-storage/docs/install/\"}>here</a></div>\n                <Link to={\"/docs/create-a-vault\"} className={\"button\"}>\n                    <span>Next Page - Create A Vault</span>\n                </Link>\n            </section>\n        </ContentWithSidebar>\n        \n    )\n}\n\nexport default GettingStarted","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst CreateAVault = () => {\n    return (\n        <ContentWithSidebar sidebarContent={[]}>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Documentation - Create A Vault</h1>\n                <div className={\"description\"}>Vaults allow you to store persistent data</div>\n                <div className={\"description\"}>The data in vaults is automatically encrypted by react-native-vault</div>\n            </section>\n            <section>\n                <h2>Basic Usage</h2>\n                <div className={\"docsDescription\"}>Import Vault</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n                        `import Vault from \"react-native-vault\";`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Create A Vault Instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n                        `// Ideally this should be in a place that can be imported from.\\n// This way you won't need to instantiate and initialize a new vault every usage.\\n\\nconst myVault = new Vault(\\n\\t<storageKey>,\\n\\t<encryptionKey>,\\n\\t<options>\\n);`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Initialize The Vault</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n                        `// You MUST do this or else the vault will not work\\n// You must also initialize the vault after the reset method is called\\n\\nmyVault.initialize(<collectionIds>).then(() => {\\n\\t// You can safely use this vault now\\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th className={\"tableDescription\"}>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>storageKey</td>\n                                <td>String</td>\n                                <td className={\"tableDescription\"}>The key the vault will be stored with in async storage. Make sure that if you are using async storage elsewhere in your app that there are no name collisions.</td>\n                                <td>\"vault\"</td>\n                            </tr>\n                            <tr>\n                                <td>encryptionKey</td>\n                                <td>String</td>\n                                <td className={\"tableDescription\"}>The encryption key that will be used to encrypt the vault. Ideally this should be stored as a secure environment variable. Make sure it is NOT DYNAMIC, or else you will likely run into decryption issues.</td>\n                                <td>Empty String</td>\n                            </tr>\n                            <tr>\n                                <td>options</td>\n                                <td>Object</td>\n                                <td colSpan={2}>See Below</td>\n                            </tr>\n                            <tr>\n                                <td>collectionIds</td>\n                                <td>Array&lt;String&gt;</td>\n                                <td className={\"tableDescription\"}>The ids of the collections you want so store in the vault. For example, if you wanted to store family and friends as two collections, you would set this to [\"family\", \"friends\"].</td>\n                                <td>Empty Array</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </section>\n            <section>\n                <h2>Options Argument</h2>\n                <div className={\"description\"}>The options property determines how errors are handled by the vault</div>\n                <div className={\"description\"}>Generally, you can omit this argument, and all errors will be dealt with by console.warn</div>\n                <div className={\"description\"}>If you have specific error handling needs, there are 3 properties you can set for more control</div>\n                <div className={\"tableContainer\"}>\n                    <div className={\"tableTitle\"}>Properties</div>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>onGetStorage</td>\n                                <td rowSpan={3}>Function</td>\n                                <td className={\"tableDescription\"}>This function will be called when an error occurs getting the vault's storageKey from async storage. It will most likely happen because you either forgot to initialize the vault or because you removed the vault's storageKey from async storage.</td>\n                                <td rowSpan={3}>console.warn</td>\n                            </tr>\n                            <tr>\n                                <td>onSetStorage</td>\n                                <td className={\"tableDescription\"}>This function will be called when an error occurs setting the vault's storageKey in async storage.</td>\n                            </tr>\n                            <tr>\n                                <td>onDecryptionFail</td>\n                                <td className={\"tableDescription\"}>This function will be called when an error occurs decrypting the data the persistent data in the vault. This will most likely happen because you either changed your encryptionKey after setting data or because you externally set the vault's storageKey in async storage.</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/getting-started\"} className={\"button\"}>\n                        <span>Last Page - Getting Started</span>\n                    </Link>\n                    <Link to={\"/docs/reset-a-vault\"} className={\"button\"}>\n                        <span>Next Page - Reset A Vault</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default CreateAVault","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst ResetAVault = () => {\n    return (\n        <ContentWithSidebar sidebarContent={[]}>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Documentation - Reset A Vault</h1>\n                <div className={\"description\"}>During development, it can be very helpful to fully reset all the data in a vault</div>\n                <div className={\"description\"}>This can be used to simulate a user who has not yet used the app</div>\n                <div className={\"description\"}>You can reset a vault in production but its is HIGHLY discouraged, and is likely to cause issues if not properly initialized after</div>\n            </section>\n            <section>\n                <h2>Vault Reset Method</h2>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n                        `myVault.reset().then(() => {\\n\\t// Vault has been reset, you most likely should initialize it here before trying to use it again\\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/create-a-vault\"} className={\"button\"}>\n                        <span>Last Page - Create A Vault</span>\n                    </Link>\n                    <Link to={\"/docs/using-deposits\"} className={\"button\"}>\n                        <span>Next Page - Using Deposits</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default ResetAVault","import React from \"react\"\n\nimport ContentWithSidebar from \"../../components/sidebar\"\n\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\nimport { Link } from \"react-router-dom\"\n\nconst UsingDeposits = () => {\n    return (\n        <ContentWithSidebar sidebarContent={[]}>\n            <section>\n                <Link to={\"/\"}>Back To Home</Link>\n                <h1>Documentation - Using Deposits</h1>\n                <div className={\"description\"}>Deposits allow you to store basic key value pairs in a vault</div>\n                <div className={\"description\"}>Deposits require no initialization and are very simple to use</div>\n                <div className={\"description\"}>You can interact with deposits through a deposit instance or directly through a vault</div>\n            </section>\n            <section>\n                <h2>Getting A Deposit Instance And Its Data</h2>\n                <div className={\"docsDescription\"}>Deposit instances are the most effective way to interact with deposits</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n                        `// Using React.useState and React.useEffect\\nlet [myDeposit, setMyDeposit] = useState(false);\\n\\nuseEffect(() => {\\n\\tif(myDeposit === false){\\n\\t\\tmyVault.getDeposit(<depositId>).then(deposit => {\\n\\t\\t\\t// IMPORTANT: deposits use their own internal data, so their internal methods WILL update the data, but external methods from a vault or other deposit instance WILL NOT. (See syncData method of deposit)\\n\\t\\t\\tsetMyDeposit(deposit);\\n\\t\\t};\\n\\t} else {\\n\\t\\tconst { exists, data } = myDeposit.data;\\n\\t};\\n});\\n\\n// Now you can use this deposit without having to get it from the vault every use (which saves time and improves performance)\\n// Just make sure myDeposit has been retrieved from async storage before you try to use it`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>If you only need to access the deposit's data once you can use the getDepositData method</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n                        `myVault.getDepositData(<depositId>).then(depositData => {\\n\\tconst { exists, data } = depositData;\\n\\t// Do stuff with data here\\n\\t// This data will NOT UPDATE when the vault itself is changed, which is why this method is intended for one time use\\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Setting / Creating A Deposit</h2>\n                <div className={\"description\"}>You can set a deposit to any valid json. Keep in mind that functions are not serializable, and therefore cannot be stored.</div>\n                <div className={\"description\"}>When you set a deposit, if it does not exist already it will create a new deposit, otherwise it will write over the existing deposit.</div>\n                <div className={\"docsDescription\"}>Setting a deposit through an instance</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n                        `myDeposit.set(<value>).then(() => {\\n\\t// Finished setting deposit value\\n});`\n                    }\n                </SyntaxHighlighter>\n                <div className={\"docsDescription\"}>Setting a deposit through a vault</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n                        `myVault.setDeposit(<depositId>, <value>).then(() => {\\n\\t// Finished setting deposit value\\n\\t// If you are using any deposit instances, you should sync their data here (see below)\\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Syncing A Deposit Instance's Data</h2>\n                <div className={\"description\"}>Whenever the value a deposit refers to is set by a vault or a different deposit instance you MUST sync its data, otherwise its data will not be up to date</div>\n                <SyntaxHighlighter customStyle={{ width: \"calc(min(80%, 600px))\", margin: \"auto\", padding: \"15px\" }} language={\"javascript\"} style={vscDarkPlus}>\n                    {\n                        `myDeposit.syncData().then(() => {\\n\\t// The data in myDeposit is now up to data\\n});`\n                    }\n                </SyntaxHighlighter>\n            </section>\n            <section>\n                <h2>Arguments</h2>\n                <div className={\"tableContainer\"}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>Description</th>\n                                <th>Default</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>depositId</td>\n                                <td>String</td>\n                                <td className={\"tableDescription\"}>The id of the deposit you are retrieving from or setting in the vault.</td>\n                                <td rowSpan={2}><strong>Argument Is Required</strong></td>\n                            </tr>\n                            <tr>\n                                <td>value</td>\n                                <td>Any</td>\n                                <td className={\"tableDescription\"}>The value you are setting the data of the target deposit to.</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div className={\"navContainer\"}>\n                    <Link to={\"/docs/reset-a-vault\"} className={\"button\"}>\n                        <span>Last Page - Reset A Vault</span>\n                    </Link>\n                    <Link to={\"/docs/using-collections\"} className={\"button\"}>\n                        <span>Next Page - Using Collections</span>\n                    </Link>\n                </div>\n            </section>\n        </ContentWithSidebar>\n    )\n}\n\nexport default UsingDeposits","import React from \"react\"\n\nimport \"./styles.scss\"\n\nimport { HashRouter, Switch, Route } from \"react-router-dom\"\n\nimport Home from \"./pages/home/index\"\nimport Example from \"./pages/example\"\nimport GettingStartedDocs from \"./pages/docs/gettingStarted\"\nimport CreateAVault from \"./pages/docs/createAVault\"\nimport ResetAVault from \"./pages/docs/resetAVault\"\nimport UsingDeposits from \"./pages/docs/usingDeposits\"\n\nconst App = () => {\n    return (\n        <HashRouter>\n            <Switch>\n                <Route path={\"/\"} exact component={Home} />\n                <Route path={\"/example\"} exact component={Example} />\n                <Route path={\"/docs/getting-started\"} exact component={GettingStartedDocs} />\n                <Route path={\"/docs/reset-a-vault\"} exact component={ResetAVault} />\n                <Route path={\"/docs/create-a-vault\"} exact component={CreateAVault} />\n                <Route path={\"/docs/using-deposits\"} exact component={UsingDeposits} />\n            </Switch>\n        </HashRouter>\n    )\n}\n\nexport default App","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from \"./app.js\"\n\nReactDOM.render(<App/>, document.getElementById(\"root\"))"],"sourceRoot":""}